{"ast":null,"code":"import produce from 'immer';\nimport { products } from '../mock-objects/products';\nexport const initialState = {\n  loading: {\n    user: false\n  },\n  user: null,\n  products: products,\n  cartProducts: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"loadUsersRequest\":\n      return produce(state, draft => {\n        draft.loading.user = true;\n      });\n\n    case \"loadUsersSuccess\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.user = action.user;\n      });\n\n    case \"loadUsersError\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n      });\n\n    case \"addProductToChart\":\n      return produce(state, draft => {\n        draft.cartProducts = state.cartProducts.concat([action.product]);\n      });\n\n    case \"removeProductToChart\":\n      return produce(state, draft => {\n        // draft.cartProducts = state.cartProducts.filter((value) => value.id !== action.id);\n        draft.cartProducts = [];\n        let removed = false;\n        state.cartProducts.forEach(product => {\n          if (!removed && product.id === action.id) {\n            removed = true;\n          } else {\n            draft.cartProducts.push(product);\n          }\n        });\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/ps/src/store/reducer.ts"],"names":["produce","products","initialState","loading","user","cartProducts","reducer","state","action","type","draft","concat","product","removed","forEach","id","push"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AAGA,OAAO,MAAMC,YAA8B,GAAG;AAC5CC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AADC,GADmC;AAI5CA,EAAAA,IAAI,EAAE,IAJsC;AAK5CH,EAAAA,QAAQ,EAAEA,QALkC;AAM5CI,EAAAA,YAAY,EAAE;AAN8B,CAAvC;;AASP,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAqD;AACnE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACE,aAAOT,OAAO,CAACO,KAAD,EAAQG,KAAK,IAAI;AAC7BA,QAAAA,KAAK,CAACP,OAAN,CAAcC,IAAd,GAAqB,IAArB;AACD,OAFa,CAAd;;AAGF,SAAK,kBAAL;AACE,aAAOJ,OAAO,CAACO,KAAD,EAAQG,KAAK,IAAI;AAC7BA,QAAAA,KAAK,CAACP,OAAN,CAAcC,IAAd,GAAqB,KAArB;AACAM,QAAAA,KAAK,CAACN,IAAN,GAAaI,MAAM,CAACJ,IAApB;AACD,OAHa,CAAd;;AAIF,SAAK,gBAAL;AACE,aAAOJ,OAAO,CAACO,KAAD,EAAQG,KAAK,IAAI;AAC7BA,QAAAA,KAAK,CAACP,OAAN,CAAcC,IAAd,GAAqB,KAArB;AACD,OAFa,CAAd;;AAGF,SAAK,mBAAL;AACE,aAAOJ,OAAO,CAACO,KAAD,EAAQG,KAAK,IAAI;AAC7BA,QAAAA,KAAK,CAACL,YAAN,GAAqBE,KAAK,CAACF,YAAN,CAAmBM,MAAnB,CAA0B,CAACH,MAAM,CAACI,OAAR,CAA1B,CAArB;AACD,OAFa,CAAd;;AAGF,SAAK,sBAAL;AACE,aAAOZ,OAAO,CAACO,KAAD,EAAQG,KAAK,IAAI;AAC7B;AACAA,QAAAA,KAAK,CAACL,YAAN,GAAqB,EAArB;AACA,YAAIQ,OAAgB,GAAG,KAAvB;AACAN,QAAAA,KAAK,CAACF,YAAN,CAAmBS,OAAnB,CAA4BF,OAAD,IAAa;AACtC,cAAG,CAACC,OAAD,IAAYD,OAAO,CAACG,EAAR,KAAeP,MAAM,CAACO,EAArC,EAAwC;AACtCF,YAAAA,OAAO,GAAG,IAAV;AACD,WAFD,MAEO;AACLH,YAAAA,KAAK,CAACL,YAAN,CAAmBW,IAAnB,CAAwBJ,OAAxB;AACD;AACF,SAND;AAOD,OAXa,CAAd;;AAYF;AACE,aAAOL,KAAP;AAhCJ;AAkCD,CAnCD;;AAqCA,eAAeD,OAAf","sourcesContent":["import produce from 'immer';\nimport { products } from '../mock-objects/products';\nimport { ApplicationState, ApplicationAction } from './types';\n\nexport const initialState: ApplicationState = {\n  loading: {\n    user: false,\n  },\n  user: null,\n  products: products,\n  cartProducts: [],\n}\n\nconst reducer = (state = initialState, action: ApplicationAction) => {\n  switch (action.type) {\n    case \"loadUsersRequest\":\n      return produce(state, draft => {\n        draft.loading.user = true;\n      });\n    case \"loadUsersSuccess\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.user = action.user;\n      });\n    case \"loadUsersError\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n      });\n    case \"addProductToChart\":\n      return produce(state, draft => {\n        draft.cartProducts = state.cartProducts.concat([action.product]);\n      });\n    case \"removeProductToChart\":\n      return produce(state, draft => {\n        // draft.cartProducts = state.cartProducts.filter((value) => value.id !== action.id);\n        draft.cartProducts = [];\n        let removed: boolean = false;\n        state.cartProducts.forEach((product) => {\n          if(!removed && product.id === action.id){\n            removed = true;\n          } else {\n            draft.cartProducts.push(product);\n          }\n        });\n      });\n    default:\n      return state;\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}