{"ast":null,"code":"import produce, { enableMapSet } from 'immer';\nimport { mockedUsers } from '../mock-objects/usersList';\nimport { products } from '../mock-objects/products';\nexport const initialState = {\n  loading: {\n    user: false\n  },\n  user: null,\n  products: products,\n  cartProducts: new Map(),\n  rentedProducts: [],\n  usersList: mockedUsers,\n  orders: []\n};\n\nconst reducer = (state = initialState, action) => {\n  enableMapSet();\n\n  switch (action.type) {\n    case \"loadUsersRequest\":\n      return produce(state, draft => {\n        draft.loading.user = true;\n      });\n\n    case \"loadUsersSuccess\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.user = action.user;\n      });\n\n    case \"loadUsersError\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n      });\n\n    case \"addProductToChart\":\n      return produce(state, draft => {\n        if (state.cartProducts.has(action.product.id)) {\n          const selectedProduct = state.cartProducts.get(action.product.id);\n          draft.cartProducts.set(action.product.id, { ...selectedProduct,\n            quantity: selectedProduct.quantity + 1\n          });\n        } else {\n          draft.cartProducts.set(action.product.id, action.product);\n        }\n      });\n\n    case \"removeProductToChart\":\n      return produce(state, draft => {\n        if (state.cartProducts.has(action.id)) {\n          const selectedProduct = state.cartProducts.get(action.id);\n\n          if (selectedProduct.quantity === 1) {\n            draft.cartProducts.delete(action.id);\n          } else {\n            draft.cartProducts.set(action.id, { ...selectedProduct,\n              quantity: selectedProduct.quantity - 1\n            });\n          }\n        }\n      });\n\n    case \"placeOrder\":\n      return produce(state, draft => {\n        let totalPrice = 0;\n        let productsOrders = [];\n        state.cartProducts.forEach(product => {\n          totalPrice += parseFloat(product.price) * product.quantity;\n          const newProductOrder = {\n            id: product.id,\n            name: product.name,\n            price: product.price,\n            quantity: product.quantity\n          };\n          draft.products.forEach((value, idx) => {\n            if (value.id === product.id) {\n              draft.products[idx].quantity -= product.quantity;\n            }\n          });\n          productsOrders.push(newProductOrder);\n        });\n        var day = new Date();\n        var dd = day.getDate().toString();\n        var mm = (day.getMonth() + 1).toString();\n        var yyyy = day.getFullYear().toString();\n\n        if (parseInt(dd) < 10) {\n          dd = '0' + dd;\n        }\n\n        if (parseInt(mm) < 10) {\n          mm = '0' + mm;\n        }\n\n        const newOrder = {\n          productsOrders: productsOrders,\n          date: dd + \"/\" + mm + \"/\" + yyyy,\n          total: totalPrice.toFixed(2),\n          status: \"Preparando para envio!\"\n        };\n        draft.orders = state.orders;\n        draft.orders.push(newOrder);\n      });\n\n    case \"clearCart\":\n      return produce(state, draft => {\n        draft.cartProducts = new Map();\n      });\n\n    case \"logInUser\":\n      return produce(state, draft => {\n        draft.user = action.user;\n      });\n\n    case \"signUpUser\":\n      return produce(state, draft => {\n        const user = {\n          id: state.usersList.length.toString(),\n          email: action.email,\n          password: action.password,\n          name: action.name,\n          address: action.address,\n          phoneNumber: action.phoneNumber,\n          role: 'user'\n        };\n        draft.user = user;\n        draft.usersList.push(draft.user);\n      });\n\n    case \"addInventory\":\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if (product.id === action.productId) {\n            draft.products[index].quantity++;\n          }\n        });\n      });\n\n    case \"removeInventory\":\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if (product.id === action.productId) {\n            draft.products[index].quantity--;\n          }\n        });\n      });\n\n    case \"rentProduct\":\n      return produce(state, draft => {});\n\n    case \"removeProduct\":\n      const newProductsArray = [];\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if (product.id !== action.productId) {\n            newProductsArray.push(product);\n          }\n        });\n        draft.products = newProductsArray;\n      });\n\n    case \"editUser\":\n      return produce(state, draft => {\n        draft.usersList = [];\n        let edited = false;\n        state.usersList.forEach(user => {\n          if (!edited && user.id === action.id) {\n            const newUser = {\n              id: action.id,\n              email: action.email,\n              password: user.password,\n              name: action.name,\n              address: action.address,\n              phoneNumber: action.phoneNumber,\n              role: user.role\n            };\n            edited = true;\n            draft.user = newUser;\n            draft.usersList.push(newUser);\n          } else {\n            draft.usersList.push(user);\n          }\n        });\n      });\n\n    case \"addAdmin\":\n      return produce(state, draft => {\n        const admin = {\n          id: state.usersList.length.toString(),\n          email: action.email,\n          password: action.password,\n          name: action.name,\n          address: action.address,\n          phoneNumber: action.phoneNumber,\n          role: 'admin'\n        };\n        draft.usersList.push(admin);\n      });\n\n    case \"registerProduct\":\n      return produce(state, draft => {\n        const product = {\n          id: (state.products.length + 1).toString(),\n          img: action.img,\n          name: action.name,\n          price: action.price,\n          quantity: action.quantity,\n          type: action.category,\n          description: action.description\n        };\n        draft.products.push(product);\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/ps/src/store/reducer.ts"],"names":["produce","enableMapSet","mockedUsers","products","initialState","loading","user","cartProducts","Map","rentedProducts","usersList","orders","reducer","state","action","type","draft","has","product","id","selectedProduct","get","set","quantity","delete","totalPrice","productsOrders","forEach","parseFloat","price","newProductOrder","name","value","idx","push","day","Date","dd","getDate","toString","mm","getMonth","yyyy","getFullYear","parseInt","newOrder","date","total","toFixed","status","length","email","password","address","phoneNumber","role","index","productId","newProductsArray","edited","newUser","admin","img","category","description"],"mappings":"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","sourcesContent":["import produce, { enableMapSet } from 'immer';\nimport { mockedUsers } from '../mock-objects/usersList';\nimport { products } from '../mock-objects/products';\nimport { ApplicationState, ApplicationAction, User, Order, ProductOrder, ProductModel } from './types';\n\nexport const initialState: ApplicationState = {\n  loading: {\n    user: false,\n  },\n  user: null,\n  products: products,\n  cartProducts: new Map(),\n  rentedProducts: [],\n  usersList: mockedUsers,\n  orders: [],\n}\n\nconst reducer = (state = initialState, action: ApplicationAction) => {\n  enableMapSet();\n  \n  switch (action.type) {\n    case \"loadUsersRequest\":\n      return produce(state, draft => {\n        draft.loading.user = true;\n      });\n    case \"loadUsersSuccess\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.user = action.user;\n      });\n    case \"loadUsersError\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n      });\n    case \"addProductToChart\":\n      return produce(state, draft => {\n        if(state.cartProducts.has(action.product.id)){\n          const selectedProduct = state.cartProducts.get(action.product.id)!;\n          draft.cartProducts.set(action.product.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n        } else {\n          draft.cartProducts.set(action.product.id, action.product);\n        }\n      });\n    case \"removeProductToChart\":\n      return produce(state, draft => {\n        if(state.cartProducts.has(action.id)){\n          const selectedProduct = state.cartProducts.get(action.id)!;\n          if(selectedProduct.quantity === 1) {\n            draft.cartProducts.delete(action.id);\n          } else {\n            draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n          }\n        }\n      });\n    case \"placeOrder\":\n      return produce(state, draft => {\n\n        let totalPrice: number = 0;\n        let productsOrders: ProductOrder[] = [];\n        \n        state.cartProducts.forEach((product) => {\n          totalPrice += parseFloat(product.price) * product.quantity;\n\n          const newProductOrder: ProductOrder = {\n            id: product.id, \n            name: product.name, \n            price: product.price, \n            quantity: product.quantity\n          }\n\n          draft.products.forEach((value, idx) => {\n            if(value.id === product.id){\n              draft.products[idx].quantity -= product.quantity;\n            }\n          })\n\n          productsOrders.push(newProductOrder);\n        });\n        \n        var day = new Date();\n        var dd = day.getDate().toString();\n        var mm = (day.getMonth()+1).toString();\n        var yyyy = (day.getFullYear()).toString();\n        if(parseInt(dd) < 10){\n          dd = '0' + dd;\n        } \n        if(parseInt(mm)<10){\n          mm = '0' + mm;\n        } \n\n        const newOrder: Order = {\n          productsOrders: productsOrders,\n          date: dd + \"/\" + mm + \"/\" + yyyy,\n          total: totalPrice.toFixed(2),\n          status: \"Preparando para envio!\",\n        }\n\n        draft.orders = state.orders;\n        draft.orders.push(newOrder);\n      });\n    case \"clearCart\":\n      return produce(state, draft => {\n        draft.cartProducts = new Map();\n      });\n    case \"logInUser\":\n      return produce(state, draft => {\n        draft.user = action.user;\n      });\n    case \"signUpUser\":\n      return produce(state, draft => {\n        const user: User = {\n            id: (state.usersList.length).toString(),\n            email: action.email,\n            password: action.password,\n            name: action.name,\n            address: action.address,\n            phoneNumber: action.phoneNumber,\n            role: 'user',\n        }\n        draft.user = user;\n        draft.usersList.push(draft.user); \n      });\n    case \"addInventory\":\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if(product.id === action.productId){\n            draft.products[index].quantity++;\n          }\n        })\n      });\n\n    case \"removeInventory\":\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if(product.id === action.productId){\n            draft.products[index].quantity--;\n          }\n        })\n      });\n    case \"rentProduct\":\n      return produce(state, draft => {\n        \n      });\n    case \"removeProduct\":\n      const newProductsArray: ProductModel[] = [];\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if(product.id !== action.productId){\n            newProductsArray.push(product);\n          }\n        })\n\n        draft.products = newProductsArray;\n      });\n      \n    case \"editUser\":\n      return produce(state, draft => {\n        draft.usersList = [];\n        let edited: boolean = false;\n        state.usersList.forEach((user) => {\n          if(!edited && user.id === action.id){\n            const newUser: User = {\n              id: action.id,\n              email: action.email,\n              password: user.password,\n              name: action.name,\n              address: action.address,\n              phoneNumber: action.phoneNumber,\n              role: user.role,\n            }\n            edited = true;\n            draft.user = newUser;\n            draft.usersList.push(newUser);\n            \n          } else {\n            draft.usersList.push(user);\n          }\n        });\n      });\n    case \"addAdmin\":\n        return produce(state, draft => {\n          const admin: User = {\n              id: (state.usersList.length).toString(),\n              email: action.email,\n              password: action.password,\n              name: action.name,\n              address: action.address,\n              phoneNumber: action.phoneNumber,\n              role: 'admin',\n          }\n          draft.usersList.push(admin); \n        });\n    case \"registerProduct\":\n      return produce(state, draft => {\n        const product: ProductModel = {\n          id: (state.products.length+1).toString(),\n          img: action.img,\n          name: action.name,\n          price: action.price,\n          quantity: action.quantity,\n          type: action.category,\n          description: action.description,\n        }\n        draft.products.push(product);\n      });\n    default:\n      return state;\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}