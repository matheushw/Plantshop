{"ast":null,"code":"import produce, { enableMapSet } from 'immer';\nimport { mockedUsers } from '../mock-objects/usersList';\nimport { ActionTypes } from './actionTypes';\nexport const initialState = {\n  loading: {\n    placePurchaseOrder: false,\n    user: false,\n    allProducts: false,\n    signUp: false\n  },\n  error: {\n    placePurchaseOrder: false,\n    user: false,\n    allProducts: false,\n    signUp: false\n  },\n  success: {\n    placePurchaseOrder: false,\n    signUp: false\n  },\n  user: null,\n  products: [],\n  cartProducts: new Map(),\n  rentOrders: [],\n  rentedProducts: [],\n  usersList: mockedUsers,\n  orders: []\n};\n\nconst reducer = (state = initialState, action) => {\n  enableMapSet();\n\n  switch (action.type) {\n    case ActionTypes.LOAD_USER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.user = true;\n        draft.error.user = false;\n      });\n\n    case ActionTypes.LOAD_USER_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = false;\n        draft.user = action.user;\n      });\n\n    case ActionTypes.LOAD_USER_ERROR:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = true;\n      });\n\n    case ActionTypes.LOAD_ALL_PRODUCTS_REQUEST:\n      return produce(state, draft => {\n        draft.loading.allProducts = true;\n        draft.error.allProducts = false;\n      });\n\n    case ActionTypes.LOAD_ALL_PRODUCTS_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.allProducts = false;\n        draft.error.allProducts = false;\n        draft.products = action.products;\n      });\n\n    case ActionTypes.LOAD_ALL_PRODUCTS_ERROR:\n      return produce(state, draft => {\n        draft.loading.allProducts = false;\n        draft.error.allProducts = true;\n      });\n\n    case ActionTypes.ADD_PRODUCT_TO_CART_REQUEST:\n      return produce(state, draft => {\n        if (state.cartProducts.has(action.product.id)) {\n          const selectedProduct = state.cartProducts.get(action.product.id);\n          draft.cartProducts.set(action.product.id, { ...selectedProduct,\n            quantity: selectedProduct.quantity + 1\n          });\n        } else {\n          draft.cartProducts.set(action.product.id, action.product);\n        }\n      });\n    // case \"removeProductToChart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1) {\n    //         draft.cartProducts.delete(action.id);\n    //       } else {\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n\n    case ActionTypes.PLACE_PURCHASE_ORDER_REQUEST:\n      return produce(state, draft => {// if(state.cartProducts.size !== 0){\n        //   let totalPrice: number = 0;\n        //   let productsOrders: ProductOrder[] = [];\n        //   state.cartProducts.forEach((product) => {\n        //     totalPrice += parseFloat(product.price) * product.quantity;\n        //     const newProductOrder: ProductOrder = {\n        //       id: product.id, \n        //       name: product.name, \n        //       price: product.price, \n        //       quantity: product.quantity\n        //     }\n        //     draft.products.forEach((value, idx) => {\n        //       if(value.id === product.id){\n        //         draft.products[idx].quantity -= product.quantity;\n        //       }\n        //     })\n        //     productsOrders.push(newProductOrder);\n        //   });\n        //   var day = new Date();\n        //   var dd = day.getDate().toString();\n        //   var mm = (day.getMonth()+1).toString();\n        //   var yyyy = (day.getFullYear()).toString();\n        //   if(parseInt(dd) < 10){\n        //     dd = '0' + dd;\n        //   } \n        //   if(parseInt(mm)<10){\n        //     mm = '0' + mm;\n        //   } \n        //   const newOrder: Order = {\n        //     productsOrders: productsOrders,\n        //     date: dd + \"/\" + mm + \"/\" + yyyy,\n        //     total: totalPrice.toFixed(2),\n        //     status: \"Preparando para envio!\",\n        //   }\n        //   draft.orders = state.orders;\n        //   draft.orders.push(newOrder);\n        // }\n        // if(state.rentOrders.length !== 0) {\n        //   draft.rentedProducts = draft.rentedProducts.concat(draft.rentOrders);\n        // }\n      });\n    // case \"clearCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.cartProducts = new Map();\n    //     draft.rentOrders = [];\n    //   });\n    // case \"removeRentOrder\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.rentOrders = [];\n    //     state.rentOrders.forEach((order) => {\n    //       if(order.orderId !== action.orderId) {\n    //         draft.rentOrders.push(order);\n    //       }\n    //     });\n    //   });\n    // case \"logInUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.user = action.user;\n    //   });\n\n    case ActionTypes.SING_UP_USER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.signUp = true;\n        draft.error.signUp = false;\n        draft.success.signUp = false;\n      });\n\n    case ActionTypes.SING_UP_USER_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.signUp = false;\n        draft.error.signUp = false;\n        draft.success.signUp = true;\n      });\n\n    case ActionTypes.SING_UP_USER_ERROR:\n      return produce(state, draft => {\n        draft.loading.signUp = false;\n        draft.error.signUp = true;\n        draft.success.signUp = false;\n      });\n    // case \"addInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity++;\n    //       }\n    //     })\n    //   });\n    // case \"removeInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity--;\n    //       }\n    //     })\n    //   });\n    // case \"rentProduct\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.rentOrders.push(action.rentOrder);\n    //   });\n    // case \"removeProduct\":\n    // case ActionTypes.:\n    //   const newProductsArray: ProductModel[] = [];\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id !== action.productId){\n    //         newProductsArray.push(product);\n    //       }\n    //     })\n    //     draft.products = newProductsArray;\n    //   });\n    // case \"editUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.usersList = [];\n    //     let edited: boolean = false;\n    //     state.usersList.forEach((user) => {\n    //       if(!edited && user.id === action.id){\n    //         const newUser: User = {\n    //           id: action.id,\n    //           email: action.email,\n    //           password: user.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: user.role,\n    //         }\n    //         edited = true;\n    //         draft.user = newUser;\n    //         draft.usersList.push(newUser);\n    //       } else {\n    //         draft.usersList.push(user);\n    //       }\n    //     });\n    //   });\n    // case \"addAdmin\":\n    // case ActionTypes.:\n    //     return produce(state, draft => {\n    //       const admin: User = {\n    //           id: (state.usersList.length).toString(),\n    //           email: action.email,\n    //           password: action.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: 'admin',\n    //       }\n    //       draft.usersList.push(admin); \n    //     });\n    // case \"registerProduct\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     const product: ProductModel = {\n    //       id: (state.products.length+1).toString(),\n    //       img: action.img,\n    //       name: action.name,\n    //       price: action.price,\n    //       quantity: action.quantity,\n    //       type: action.category,\n    //       description: action.description,\n    //     }\n    //     draft.products.push(product);\n    //   });\n    // case \"minusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1){\n    //         draft.cartProducts.delete(action.id);\n    //       }else if(selectedProduct.quantity > 1){\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n    // case \"plusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     state.products.forEach(product => {\n    //       if(state.cartProducts.has(action.id)){\n    //         const selectedProduct = state.cartProducts.get(action.id)!;\n    //         if(product.id === action.id && product.quantity - selectedProduct.quantity > 0){\n    //           draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n    //         }\n    //       }\n    //     });\n    //   });\n    // case ActionTypes.LOG_OUT_REQUEST:\n    //   return produce(state, draft => {\n    //     draft.loading = true;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_SUCCESS:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_ERROR:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.error = true;\n    //     draft.user = null;\n    //   });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/src/store/reducer.ts"],"names":["produce","enableMapSet","mockedUsers","ActionTypes","initialState","loading","placePurchaseOrder","user","allProducts","signUp","error","success","products","cartProducts","Map","rentOrders","rentedProducts","usersList","orders","reducer","state","action","type","LOAD_USER_REQUEST","draft","LOAD_USER_SUCCESS","LOAD_USER_ERROR","LOAD_ALL_PRODUCTS_REQUEST","LOAD_ALL_PRODUCTS_SUCCESS","LOAD_ALL_PRODUCTS_ERROR","ADD_PRODUCT_TO_CART_REQUEST","has","product","id","selectedProduct","get","set","quantity","PLACE_PURCHASE_ORDER_REQUEST","SING_UP_USER_REQUEST","SING_UP_USER_SUCCESS","SING_UP_USER_ERROR"],"mappings":"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","sourcesContent":["import produce, { enableMapSet } from 'immer';\nimport { mockedUsers } from '../mock-objects/usersList';\nimport { products } from '../mock-objects/products';\nimport { ApplicationState, User, Order, ProductOrder, ProductModel } from './types';\nimport { ApplicationAction } from './actions';\nimport { ActionTypes } from './actionTypes';\n\nexport const initialState: ApplicationState = {\n  loading: {\n    placePurchaseOrder: false,\n    user: false,\n    allProducts: false,\n    signUp: false,\n  },\n  error: {\n    placePurchaseOrder: false,\n    user: false,\n    allProducts: false,\n    signUp: false,\n  },\n  success: {\n    placePurchaseOrder: false,\n    signUp: false,\n  },\n  user: null,\n  products: [],\n  cartProducts: new Map(),\n  rentOrders: [],\n  rentedProducts: [],\n  usersList: mockedUsers,\n  orders: [],\n}\n\nconst reducer = (state = initialState, action: ApplicationAction) => {\n  enableMapSet();\n  \n  switch (action.type) {\n    case ActionTypes.LOAD_USER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.user = true;\n        draft.error.user = false;\n      });\n      case ActionTypes.LOAD_USER_SUCCESS:\n        return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = false;\n        draft.user = action.user;\n      });\n    case ActionTypes.LOAD_USER_ERROR:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = true;\n      });\n    case ActionTypes.LOAD_ALL_PRODUCTS_REQUEST:\n      return produce(state, draft => {\n        draft.loading.allProducts = true;\n        draft.error.allProducts = false;\n      });\n      case ActionTypes.LOAD_ALL_PRODUCTS_SUCCESS:\n        return produce(state, draft => {\n        draft.loading.allProducts = false;\n        draft.error.allProducts = false;\n        draft.products = action.products;\n      });\n    case ActionTypes.LOAD_ALL_PRODUCTS_ERROR:\n      return produce(state, draft => {\n        draft.loading.allProducts = false;\n        draft.error.allProducts = true;\n      });\n    case ActionTypes.ADD_PRODUCT_TO_CART_REQUEST:\n      return produce(state, draft => {\n        if(state.cartProducts.has(action.product.id)){\n          const selectedProduct = state.cartProducts.get(action.product.id)!;\n          draft.cartProducts.set(action.product.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n        } else {\n          draft.cartProducts.set(action.product.id, action.product);\n        }\n      });\n    // case \"removeProductToChart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1) {\n    //         draft.cartProducts.delete(action.id);\n    //       } else {\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n    case ActionTypes.PLACE_PURCHASE_ORDER_REQUEST:\n      return produce(state, draft => {\n        // if(state.cartProducts.size !== 0){\n        //   let totalPrice: number = 0;\n        //   let productsOrders: ProductOrder[] = [];\n          \n        //   state.cartProducts.forEach((product) => {\n        //     totalPrice += parseFloat(product.price) * product.quantity;\n\n        //     const newProductOrder: ProductOrder = {\n        //       id: product.id, \n        //       name: product.name, \n        //       price: product.price, \n        //       quantity: product.quantity\n        //     }\n\n        //     draft.products.forEach((value, idx) => {\n        //       if(value.id === product.id){\n        //         draft.products[idx].quantity -= product.quantity;\n        //       }\n        //     })\n\n        //     productsOrders.push(newProductOrder);\n        //   });\n          \n        //   var day = new Date();\n        //   var dd = day.getDate().toString();\n        //   var mm = (day.getMonth()+1).toString();\n        //   var yyyy = (day.getFullYear()).toString();\n        //   if(parseInt(dd) < 10){\n        //     dd = '0' + dd;\n        //   } \n        //   if(parseInt(mm)<10){\n        //     mm = '0' + mm;\n        //   } \n\n        //   const newOrder: Order = {\n        //     productsOrders: productsOrders,\n        //     date: dd + \"/\" + mm + \"/\" + yyyy,\n        //     total: totalPrice.toFixed(2),\n        //     status: \"Preparando para envio!\",\n        //   }\n\n        //   draft.orders = state.orders;\n        //   draft.orders.push(newOrder);\n        // }\n\n        // if(state.rentOrders.length !== 0) {\n        //   draft.rentedProducts = draft.rentedProducts.concat(draft.rentOrders);\n        // }\n      });\n    // case \"clearCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.cartProducts = new Map();\n    //     draft.rentOrders = [];\n    //   });\n    // case \"removeRentOrder\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.rentOrders = [];\n    //     state.rentOrders.forEach((order) => {\n    //       if(order.orderId !== action.orderId) {\n    //         draft.rentOrders.push(order);\n    //       }\n    //     });\n    //   });\n    // case \"logInUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.user = action.user;\n    //   });\n    case ActionTypes.SING_UP_USER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.signUp = true;\n        draft.error.signUp = false;\n        draft.success.signUp = false;\n      });\n    case ActionTypes.SING_UP_USER_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.signUp = false;\n        draft.error.signUp = false;\n        draft.success.signUp = true; \n      });\n    case ActionTypes.SING_UP_USER_ERROR:\n      return produce(state, draft => {\n        draft.loading.signUp = false;\n        draft.error.signUp = true;\n        draft.success.signUp = false;\n      });\n    // case \"addInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity++;\n    //       }\n    //     })\n    //   });\n\n    // case \"removeInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity--;\n    //       }\n    //     })\n    //   });\n    // case \"rentProduct\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.rentOrders.push(action.rentOrder);\n    //   });\n    // case \"removeProduct\":\n    // case ActionTypes.:\n    //   const newProductsArray: ProductModel[] = [];\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id !== action.productId){\n    //         newProductsArray.push(product);\n    //       }\n    //     })\n\n    //     draft.products = newProductsArray;\n    //   });\n      \n    // case \"editUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.usersList = [];\n    //     let edited: boolean = false;\n    //     state.usersList.forEach((user) => {\n    //       if(!edited && user.id === action.id){\n    //         const newUser: User = {\n    //           id: action.id,\n    //           email: action.email,\n    //           password: user.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: user.role,\n    //         }\n    //         edited = true;\n    //         draft.user = newUser;\n    //         draft.usersList.push(newUser);\n            \n    //       } else {\n    //         draft.usersList.push(user);\n    //       }\n    //     });\n    //   });\n    // case \"addAdmin\":\n    // case ActionTypes.:\n    //     return produce(state, draft => {\n    //       const admin: User = {\n    //           id: (state.usersList.length).toString(),\n    //           email: action.email,\n    //           password: action.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: 'admin',\n    //       }\n    //       draft.usersList.push(admin); \n    //     });\n    // case \"registerProduct\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     const product: ProductModel = {\n    //       id: (state.products.length+1).toString(),\n    //       img: action.img,\n    //       name: action.name,\n    //       price: action.price,\n    //       quantity: action.quantity,\n    //       type: action.category,\n    //       description: action.description,\n    //     }\n    //     draft.products.push(product);\n    //   });\n    // case \"minusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1){\n    //         draft.cartProducts.delete(action.id);\n    //       }else if(selectedProduct.quantity > 1){\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n    // case \"plusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     state.products.forEach(product => {\n    //       if(state.cartProducts.has(action.id)){\n    //         const selectedProduct = state.cartProducts.get(action.id)!;\n    //         if(product.id === action.id && product.quantity - selectedProduct.quantity > 0){\n    //           draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n    //         }\n    //       }\n    //     });\n    //   });\n    // case ActionTypes.LOG_OUT_REQUEST:\n    //   return produce(state, draft => {\n    //     draft.loading = true;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_SUCCESS:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_ERROR:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.error = true;\n    //     draft.user = null;\n    //   });\n    default:\n      return state;\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}