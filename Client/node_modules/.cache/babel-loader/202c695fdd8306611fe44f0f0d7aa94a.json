{"ast":null,"code":"import produce from 'immer';\nimport { products } from '../mock-objects/products';\nexport const initialState = {\n  loading: {\n    user: false\n  },\n  user: null,\n  products: products,\n  cartProducts: [],\n  usersList: [],\n  orders: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"loadUsersRequest\":\n      return produce(state, draft => {\n        draft.loading.user = true;\n      });\n\n    case \"loadUsersSuccess\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.user = action.user;\n      });\n\n    case \"loadUsersError\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n      });\n\n    case \"addProductToChart\":\n      return produce(state, draft => {\n        draft.cartProducts = state.cartProducts.concat([action.product]);\n      });\n\n    case \"removeProductToChart\":\n      return produce(state, draft => {\n        // draft.cartProducts = state.cartProducts.filter((value) => value.id !== action.id);\n        draft.cartProducts = [];\n        let removed = false;\n        state.cartProducts.forEach(product => {\n          if (!removed && product.id === action.id) {\n            removed = true;\n          } else {\n            draft.cartProducts.push(product);\n          }\n        });\n      });\n\n    case \"placeOrder\":\n      return produce(state, draft => {\n        const date = new Date();\n        let totalPrice = 0;\n        let products = new Map();\n        action.products.forEach(product => {\n          totalPrice += parseFloat(product.price);\n\n          if (product.id in products) {\n            const auxProduct = products.get(product.id);\n            products.set(product.id, { ...auxProduct,\n              quantity: 3\n            });\n          } else {\n            const newProductOrder = {\n              id: product.id,\n              name: product.name,\n              price: product.price,\n              quantity: 1\n            };\n            products.set(product.id, newProductOrder);\n          }\n        });\n        let productsOrders = [];\n        products.forEach(productOrder => productsOrders.push(productOrder));\n        const newOrder = {\n          productsOrders: productsOrders,\n          date: date.getDate() + \"/\" + date.getMonth() + \"/\" + date.getFullYear(),\n          total: totalPrice.toFixed(2),\n          status: \"Preparando para envio!\"\n        };\n        draft.orders = state.orders;\n        draft.orders.push(newOrder);\n      });\n\n    case \"logInUser\":\n      return produce(state, draft => {\n        const user = {\n          email: action.email,\n          password: action.password,\n          name: '',\n          address: '',\n          phoneNumber: ''\n        };\n        draft.user = user; //draft.usersList.push(draft.user); \n      });\n\n    case \"signUpUser\":\n      return produce(state, draft => {\n        const user = {\n          email: action.email,\n          password: action.password,\n          name: action.name,\n          address: action.address,\n          phoneNumber: action.phoneNumber\n        };\n        draft.user = user;\n        draft.usersList.push(draft.user);\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/ps/src/store/reducer.ts"],"names":["produce","products","initialState","loading","user","cartProducts","usersList","orders","reducer","state","action","type","draft","concat","product","removed","forEach","id","push","date","Date","totalPrice","Map","parseFloat","price","auxProduct","get","set","quantity","newProductOrder","name","productsOrders","productOrder","newOrder","getDate","getMonth","getFullYear","total","toFixed","status","email","password","address","phoneNumber"],"mappings":"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","sourcesContent":["import produce from 'immer';\nimport { products } from '../mock-objects/products';\nimport { ApplicationState, ApplicationAction, User, Order, ProductOrder } from './types';\n\nexport const initialState: ApplicationState = {\n  loading: {\n    user: false,\n  },\n  user: null,\n  products: products,\n  cartProducts: [],\n  usersList: [],\n  orders: [],\n}\n\nconst reducer = (state = initialState, action: ApplicationAction) => {\n  switch (action.type) {\n    case \"loadUsersRequest\":\n      return produce(state, draft => {\n        draft.loading.user = true;\n      });\n    case \"loadUsersSuccess\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.user = action.user;\n      });\n    case \"loadUsersError\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n      });\n    case \"addProductToChart\":\n      return produce(state, draft => {\n        draft.cartProducts = state.cartProducts.concat([action.product]);\n      });\n    case \"removeProductToChart\":\n      return produce(state, draft => {\n        // draft.cartProducts = state.cartProducts.filter((value) => value.id !== action.id);\n        draft.cartProducts = [];\n        let removed: boolean = false;\n        state.cartProducts.forEach((product) => {\n          if(!removed && product.id === action.id){\n            removed = true;\n          } else {\n            draft.cartProducts.push(product);\n          }\n        })\n      });\n    case \"placeOrder\":\n      return produce(state, draft => {\n\n        const date = new Date();\n        let totalPrice: number = 0;\n        let products: Map<string, ProductOrder> = new Map<string, ProductOrder>();\n\n        action.products.forEach((product) => {\n          totalPrice += parseFloat(product.price);\n\n          if (product.id in products){\n            const auxProduct = products.get(product.id)!;\n            products.set(product.id, {...auxProduct, quantity: 3});\n          } else {\n            const newProductOrder: ProductOrder = {\n              id: product.id, \n              name: product.name, \n              price: product.price, \n              quantity: 1 \n            };\n            products.set(product.id, newProductOrder);\n          }\n\n        });\n\n        let productsOrders: ProductOrder[] = [];\n\n        products.forEach((productOrder) => productsOrders.push(productOrder));\n        \n        const newOrder: Order ={\n          productsOrders: productsOrders,\n          date: date.getDate() + \"/\" + date.getMonth() + \"/\" + date.getFullYear(),\n          total: totalPrice.toFixed(2),\n          status: \"Preparando para envio!\",\n        }\n        draft.orders = state.orders;\n        draft.orders.push(newOrder);\n      });\n    case \"logInUser\":\n      return produce(state, draft => {\n        const user: User = {\n            email: action.email,\n            password: action.password,\n            name: '',\n            address: '',\n            phoneNumber: '',\n        }\n        draft.user = user;\n        //draft.usersList.push(draft.user); \n      });\n    case \"signUpUser\":\n      return produce(state, draft => {\n        const user: User = {\n            email: action.email,\n            password: action.password,\n            name: action.name,\n            address: action.address,\n            phoneNumber: action.phoneNumber,\n        }\n        draft.user = user;\n        draft.usersList.push(draft.user); \n      });\n    default:\n      return state;\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}