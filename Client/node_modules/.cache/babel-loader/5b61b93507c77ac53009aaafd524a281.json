{"ast":null,"code":"var _jsxFileName = \"/Users/matheuscunha/USP/Plantshop/src/packages/admin/src/components/InventoryPage/InventoryPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport ManageButton from '../../../../../base-components/ManageButton';\nimport InventoryList from '../InventoryList';\nimport { loadAllProductsRequest, inventoryReset } from \"../../../../../store/actionCreators\";\nimport * as styles from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst InventoryPage = props => {\n  _s();\n\n  useEffect(() => {\n    if (props.success.addInventory && !props.loadings.addInventory && !props.errors.addInventory || props.success.removeInventory && !props.loadings.removeInventory && !props.errors.removeInventory || props.success.removeProduct && !props.loadings.removeProduct && !props.errors.removeProduct) {\n      props.loadInventory();\n      props.resetInventory();\n    }\n  }, [props.success.addInventory, props.success.removeInventory, props.success.removeProduct]);\n\n  const splitProducts = products => {\n    const productsMap = new Map();\n    products.forEach(product => {\n      if (productsMap.has(product.type)) {\n        const typeList = productsMap.get(product.type);\n        typeList.push(product);\n        productsMap.set(product.type, typeList);\n      } else {\n        productsMap.set(product.type, [product]);\n      }\n    });\n    return productsMap;\n  };\n\n  const renderProductTypeList = products => {\n    const lists = [];\n    products.forEach((productsType, title) => {\n      lists.push( /*#__PURE__*/_jsxDEV(InventoryList, {\n        title: title,\n        products: productsType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }, this));\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: lists\n    }, void 0, false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.mainPage,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Estoque\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/add-product-page\",\n      children: [/*#__PURE__*/_jsxDEV(ManageButton, {\n        text: \"Adicionar novo produto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 32\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 3\n    }, this), renderProductTypeList(splitProducts(props.products))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 3\n  }, this);\n};\n\n_s(InventoryPage, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = InventoryPage;\n\nconst mapStateToProps = state => ({\n  products: state.products,\n  success: state.success,\n  errors: state.error,\n  loadings: state.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n  loadInventory: () => {\n    dispatch(loadAllProductsRequest());\n  },\n  resetInventory: () => {\n    dispatch(inventoryReset());\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InventoryPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"InventoryPage\");","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/src/packages/admin/src/components/InventoryPage/InventoryPage.tsx"],"names":["React","useEffect","connect","Link","ManageButton","InventoryList","loadAllProductsRequest","inventoryReset","styles","InventoryPage","props","success","addInventory","loadings","errors","removeInventory","removeProduct","loadInventory","resetInventory","splitProducts","products","productsMap","Map","forEach","product","has","type","typeList","get","push","set","renderProductTypeList","lists","productsType","title","mainPage","mapStateToProps","state","error","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport {useEffect} from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { Link } from 'react-router-dom';\nimport ManageButton from '../../../../../base-components/ManageButton';\nimport InventoryList from '../InventoryList';\nimport { ApplicationState, ProductModel, PossibleStates } from '../../../../../store/types';\nimport { loadAllProductsRequest, inventoryReset} from \"../../../../../store/actionCreators\";\nimport * as styles from './styles'\n\nexport interface InventoryPageProps{\n  products: ProductModel[];\n  success: PossibleStates;\n  errors: PossibleStates;\n  loadings: PossibleStates;\n\tloadInventory: () => void;\n  resetInventory: () => void;\n}\n\nconst InventoryPage: React.FC <InventoryPageProps> = (props) => {\n  useEffect(() => {\n\t\tif(\n      (props.success.addInventory && !props.loadings.addInventory && !props.errors.addInventory ) \n      || \n      (props.success.removeInventory && !props.loadings.removeInventory && !props.errors.removeInventory ) \n      ||\n      (props.success.removeProduct && !props.loadings.removeProduct && !props.errors.removeProduct ) \n    ){\n      props.loadInventory();\n      props.resetInventory();\n    }  \n\t}, [props.success.addInventory, props.success.removeInventory, props.success.removeProduct]);\n\n\tconst splitProducts = (products: ProductModel[]) => {\n\t\tconst productsMap: Map<string, ProductModel[]> = new Map();\n\t\tproducts.forEach((product) => {\n\t\t\tif (productsMap.has(product.type)){\n\t\t\t\tconst typeList: ProductModel[] = productsMap.get(product.type)!;\n\t\t\t\ttypeList.push(product);\n\t\t\t\tproductsMap.set(product.type, typeList);\n\t\t\t} else {\n\t\t\t\tproductsMap.set(product.type, [product]);\n\t\t\t}\n\t\t});\n\n\t\treturn productsMap;\n\t}\n\n\tconst renderProductTypeList = (products:Map<string, ProductModel[]>) => {\n\t\tconst lists: ReactNode[] = [];\n\n\t\tproducts.forEach((productsType, title) => {\n\t\t\tlists.push(<InventoryList title={title} products={productsType} />);\n\t\t});\n\n\t\treturn (\n\t\t<>\n\t\t\t{lists}\n\t\t</>\n\t\t)\n\t}\n\n\treturn(\n\t\t<div className={styles.mainPage}>\n\t\t<h1>Estoque</h1>\n\t\t<Link to=\"/add-product-page\"><ManageButton text={\"Adicionar novo produto\"} /> </Link>\n\t\t{renderProductTypeList(splitProducts(props.products))}\n\t\t</div>\n\t);\n}\n\ninterface DispatchProps {\n  loadInventory: () => void;\n  resetInventory: () => void;\n}\n\ninterface StateProps{\n  \tproducts: ProductModel[];\n    success: PossibleStates;\n    errors: PossibleStates;\n    loadings: PossibleStates;\n}\n\nconst mapStateToProps = (state: ApplicationState): StateProps => ({\n  \tproducts: state.products,\n    success: state.success,\n  errors: state.error,\n  loadings: state.error,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  loadInventory: () => {dispatch(loadAllProductsRequest())},\n  resetInventory: () => {dispatch(inventoryReset())}\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InventoryPage);"]},"metadata":{},"sourceType":"module"}