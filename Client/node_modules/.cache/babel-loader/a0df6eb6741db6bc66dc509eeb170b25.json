{"ast":null,"code":"import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { loadAllProductsError, loadAllProductsSuccess, loadUsersError, loadUsersSuccess } from './actionCreators';\nimport { ActionTypes } from './actionTypes';\nimport ApiRequester from './apiRequester';\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* fetchUser(action) {\n  try {\n    const user = yield call(ApiRequester.tryToAuthenticate, action.email, action.password);\n    yield put(user.name === undefined ? loadUsersError() : loadUsersSuccess(user));\n  } catch (e) {\n    yield put(loadUsersError());\n  }\n}\n\nfunction* loadAllProductsSagas() {\n  try {\n    const products = yield call(ApiRequester.getAllProducts);\n    yield put(loadAllProductsSuccess(products));\n  } catch (e) {\n    yield put(loadAllProductsError());\n  }\n}\n\nfunction* mySaga() {\n  yield all([takeLatest(ActionTypes.LOAD_USER_REQUEST, fetchUser), takeLatest(ActionTypes.LOAD_ALL_PRODUCTS_REQUEST, loadAllProductsSagas)]);\n}\n\nexport default mySaga;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/src/store/sagas.ts"],"names":["all","call","put","takeLatest","loadAllProductsError","loadAllProductsSuccess","loadUsersError","loadUsersSuccess","ActionTypes","ApiRequester","fetchUser","action","user","tryToAuthenticate","email","password","name","undefined","e","loadAllProductsSagas","products","getAllProducts","mySaga","LOAD_USER_REQUEST","LOAD_ALL_PRODUCTS_REQUEST"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,SAASC,oBAAT,EAA+BC,sBAA/B,EAAuDC,cAAvD,EAAuEC,gBAAvE,QAA+F,kBAA/F;AAEA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAGA;AAEA,UAAUC,SAAV,CAAoBC,MAApB,EAAoD;AACjD,MAAI;AACD,UAAMC,IAAI,GAAG,MAAMX,IAAI,CAACQ,YAAY,CAACI,iBAAd,EAAiCF,MAAM,CAACG,KAAxC,EAA+CH,MAAM,CAACI,QAAtD,CAAvB;AACA,UAAMb,GAAG,CAACU,IAAI,CAACI,IAAL,KAAcC,SAAd,GAAyBX,cAAc,EAAvC,GAA4CC,gBAAgB,CAACK,IAAD,CAA7D,CAAT;AACF,GAHD,CAGE,OAAOM,CAAP,EAAU;AACT,UAAMhB,GAAG,CAACI,cAAc,EAAf,CAAT;AACF;AACH;;AAED,UAAUa,oBAAV,GAAuC;AACpC,MAAI;AACD,UAAMC,QAAQ,GAAG,MAAMnB,IAAI,CAACQ,YAAY,CAACY,cAAd,CAA3B;AACA,UAAMnB,GAAG,CAACG,sBAAsB,CAACe,QAAD,CAAvB,CAAT;AACF,GAHD,CAGE,OAAOF,CAAP,EAAU;AACT,UAAMhB,GAAG,CAACE,oBAAoB,EAArB,CAAT;AACF;AACH;;AAED,UAAUkB,MAAV,GAAmB;AACjB,QAAMtB,GAAG,CAAC,CACPG,UAAU,CAACK,WAAW,CAACe,iBAAb,EAAgCb,SAAhC,CADH,EAEPP,UAAU,CAACK,WAAW,CAACgB,yBAAb,EAAwCL,oBAAxC,CAFH,CAAD,CAAT;AAID;;AAED,eAAeG,MAAf","sourcesContent":["import { all, call, put, takeLatest } from 'redux-saga/effects'\nimport { loadAllProductsError, loadAllProductsSuccess, loadUsersError, loadUsersSuccess } from './actionCreators';\nimport { LoadAllProductsRequest, LoadUsersRequest } from './actions';\nimport { ActionTypes } from './actionTypes';\nimport ApiRequester from './apiRequester'\nimport { User } from './types';\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* fetchUser(action: LoadUsersRequest) : any {\n   try {\n      const user = yield call(ApiRequester.tryToAuthenticate, action.email, action.password);\n      yield put(user.name === undefined? loadUsersError() : loadUsersSuccess(user));\n   } catch (e) {\n      yield put(loadUsersError());\n   }\n}\n\nfunction* loadAllProductsSagas() : any {\n   try {\n      const products = yield call(ApiRequester.getAllProducts);\n      yield put(loadAllProductsSuccess(products));\n   } catch (e) {\n      yield put(loadAllProductsError());\n   }\n}\n\nfunction* mySaga() {\n  yield all([\n     takeLatest(ActionTypes.LOAD_USER_REQUEST, fetchUser),\n     takeLatest(ActionTypes.LOAD_ALL_PRODUCTS_REQUEST, loadAllProductsSagas),\n  ]);\n}\n\nexport default mySaga;"]},"metadata":{},"sourceType":"module"}