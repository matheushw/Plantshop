{"ast":null,"code":"import { call, put, takeLatest } from 'redux-saga/effects';\nimport { loadUsersError, loadUsersSuccess } from './actionCreators';\nimport { ActionTypes } from './actionTypes';\nimport ApiRequester from './apiRequester';\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* fetchUser(action) {\n  try {\n    const user = yield call(ApiRequester.tryToAuthenticate, action.email, action.password);\n    yield put(loadUsersSuccess(user));\n  } catch (e) {\n    yield put(loadUsersError());\n  }\n}\n\nfunction* mySaga() {\n  yield takeLatest(ActionTypes.LOAD_USER_REQUEST, fetchUser);\n}\n\nexport default mySaga;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/src/store/sagas.ts"],"names":["call","put","takeLatest","loadUsersError","loadUsersSuccess","ActionTypes","ApiRequester","fetchUser","action","user","tryToAuthenticate","email","password","e","mySaga","LOAD_USER_REQUEST"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,kBAAjD;AAEA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAGA;AAEA,UAAUC,SAAV,CAAoBC,MAApB,EAAoD;AACjD,MAAI;AACD,UAAMC,IAAI,GAAG,MAAMT,IAAI,CAACM,YAAY,CAACI,iBAAd,EAAiCF,MAAM,CAACG,KAAxC,EAA+CH,MAAM,CAACI,QAAtD,CAAvB;AACA,UAAMX,GAAG,CAACG,gBAAgB,CAACK,IAAD,CAAjB,CAAT;AACF,GAHD,CAGE,OAAOI,CAAP,EAAU;AACT,UAAMZ,GAAG,CAACE,cAAc,EAAf,CAAT;AACF;AACH;;AAED,UAAUW,MAAV,GAAmB;AACjB,QAAMZ,UAAU,CAACG,WAAW,CAACU,iBAAb,EAAgCR,SAAhC,CAAhB;AACD;;AAED,eAAeO,MAAf","sourcesContent":["import { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\nimport { loadUsersError, loadUsersSuccess } from './actionCreators';\nimport { LoadUsersRequest } from './actions';\nimport { ActionTypes } from './actionTypes';\nimport ApiRequester from './apiRequester'\nimport { User } from './types';\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* fetchUser(action: LoadUsersRequest) : any {\n   try {\n      const user = yield call(ApiRequester.tryToAuthenticate, action.email, action.password);\n      yield put(loadUsersSuccess(user));\n   } catch (e) {\n      yield put(loadUsersError());\n   }\n}\n\nfunction* mySaga() {\n  yield takeLatest(ActionTypes.LOAD_USER_REQUEST, fetchUser);\n}\n\nexport default mySaga;"]},"metadata":{},"sourceType":"module"}