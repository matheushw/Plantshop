{"ast":null,"code":"import produce, { enableMapSet } from 'immer';\nimport { mockedUsers } from '../mock-objects/usersList';\nimport { initialPossibleState } from './types';\nimport { ActionTypes } from './actionTypes';\nexport const initialState = {\n  loading: initialPossibleState,\n  error: initialPossibleState,\n  success: initialPossibleState,\n  user: null,\n  products: [],\n  cartProducts: new Map(),\n  rentOrders: [],\n  rentedProducts: [],\n  usersList: mockedUsers,\n  orders: []\n};\n\nconst reducer = (state = initialState, action) => {\n  enableMapSet();\n\n  switch (action.type) {\n    case ActionTypes.LOAD_USER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.user = true;\n      });\n\n    case ActionTypes.LOAD_USER_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = false;\n        localStorage.setItem('@plantshop/email', action.user.email);\n        localStorage.setItem('@plantshop/password', action.user.password);\n        draft.user = action.user;\n      });\n\n    case ActionTypes.LOAD_USER_ERROR:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = true;\n      });\n\n    case ActionTypes.LOAD_USER_RESET:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = false;\n      });\n\n    case ActionTypes.LOAD_ALL_PRODUCTS_REQUEST:\n      return produce(state, draft => {\n        draft.loading.allProducts = true;\n        draft.error.allProducts = false;\n      });\n\n    case ActionTypes.LOAD_ALL_PRODUCTS_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.allProducts = false;\n        draft.error.allProducts = false;\n        draft.products = action.products;\n      });\n\n    case ActionTypes.LOAD_ALL_PRODUCTS_ERROR:\n      return produce(state, draft => {\n        draft.loading.allProducts = false;\n        draft.error.allProducts = true;\n      });\n\n    case ActionTypes.ADD_PRODUCT_TO_CART_REQUEST:\n      return produce(state, draft => {\n        if (state.cartProducts.has(action.product.id)) {\n          const selectedProduct = state.cartProducts.get(action.product.id);\n          draft.cartProducts.set(action.product.id, { ...selectedProduct,\n            quantity: selectedProduct.quantity + 1\n          });\n        } else {\n          draft.cartProducts.set(action.product.id, action.product);\n        }\n      });\n\n    case ActionTypes.REMOVE_PRODUCT_FROM_CART_RQUEST:\n      return produce(state, draft => {\n        if (state.cartProducts.has(action.id)) {\n          const selectedProduct = state.cartProducts.get(action.id);\n          draft.cartProducts.delete(action.id);\n        }\n      });\n\n    case ActionTypes.PLACE_PURCHASE_ORDER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.placePurchaseOrder = true;\n        draft.error.placePurchaseOrder = false;\n        draft.success.placePurchaseOrder = false;\n      });\n\n    case ActionTypes.PLACE_PURCHASE_ORDER_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.placePurchaseOrder = false;\n        draft.error.placePurchaseOrder = false;\n        draft.success.placePurchaseOrder = true;\n        draft.cartProducts = new Map();\n      });\n\n    case ActionTypes.PLACE_PURCHASE_ORDER_ERROR:\n      return produce(state, draft => {\n        draft.loading.placePurchaseOrder = false;\n        draft.error.placePurchaseOrder = true;\n        draft.success.placePurchaseOrder = false;\n      });\n\n    case ActionTypes.PLACE_PURCHASE_ORDER_NOT_ASKED:\n      return produce(state, draft => {\n        draft.loading.placePurchaseOrder = false;\n        draft.error.placePurchaseOrder = false;\n        draft.success.placePurchaseOrder = false;\n      });\n\n    case ActionTypes.CLEAR_PRODUCT_IN_CART_REQUEST:\n      return produce(state, draft => {\n        draft.cartProducts = new Map();\n        draft.rentOrders = [];\n      });\n\n    case ActionTypes.REMOVE_RENT_ORDER_REQUEST:\n      return produce(state, draft => {\n        draft.rentOrders = [];\n        state.rentOrders.forEach(order => {\n          if (order.orderId !== action.orderId) {\n            draft.rentOrders.push(order);\n          }\n        });\n      });\n    // case \"addProductToChart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.product.id)){\n    //       const selectedProduct = state.cartProducts.get(action.product.id)!;\n    //       draft.cartProducts.set(action.product.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n    //     } else {\n    //       draft.cartProducts.set(action.product.id, action.product);\n    //     }\n    //   });\n    // case \"removeProductToChart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1) {\n    //         draft.cartProducts.delete(action.id);\n    //       } else {\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n    // case \"placeOrder\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.size !== 0){\n    //       let totalPrice: number = 0;\n    //       let productsOrders: ProductOrder[] = [];\n    //       state.cartProducts.forEach((product) => {\n    //         totalPrice += parseFloat(product.price) * product.quantity;\n    //         const newProductOrder: ProductOrder = {\n    //           id: product.id, \n    //           name: product.name, \n    //           price: product.price, \n    //           quantity: product.quantity\n    //         }\n    //         draft.products.forEach((value, idx) => {\n    //           if(value.id === product.id){\n    //             draft.products[idx].quantity -= product.quantity;\n    //           }\n    //         })\n    //         productsOrders.push(newProductOrder);\n    //       });\n    //       var day = new Date();\n    //       var dd = day.getDate().toString();\n    //       var mm = (day.getMonth()+1).toString();\n    //       var yyyy = (day.getFullYear()).toString();\n    //       if(parseInt(dd) < 10){\n    //         dd = '0' + dd;\n    //       } \n    //       if(parseInt(mm)<10){\n    //         mm = '0' + mm;\n    //       } \n    //       const newOrder: Order = {\n    //         productsOrders: productsOrders,\n    //         date: dd + \"/\" + mm + \"/\" + yyyy,\n    //         total: totalPrice.toFixed(2),\n    //         status: \"Preparando para envio!\",\n    //       }\n    //       draft.orders = state.orders;\n    //       draft.orders.push(newOrder);\n    //     }\n    //     if(state.rentOrders.length !== 0) {\n    //       draft.rentedProducts = draft.rentedProducts.concat(draft.rentOrders);\n    //     }\n    //   });\n    // case \"clearCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.cartProducts = new Map();\n    //     draft.rentOrders = [];\n    //   });\n    // case \"removeRentOrder\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.rentOrders = [];\n    //     state.rentOrders.forEach((order) => {\n    //       if(order.orderId !== action.orderId) {\n    //         draft.rentOrders.push(order);\n    //       }\n    //     });\n    //   });\n    // case \"logInUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.user = action.user;\n    //   });\n\n    case ActionTypes.SIGN_UP_USER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.signUp = true;\n        draft.error.signUp = false;\n        draft.success.signUp = false;\n      });\n\n    case ActionTypes.SIGN_UP_USER_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.signUp = false;\n        draft.error.signUp = false;\n        draft.success.signUp = true;\n      });\n\n    case ActionTypes.SIGN_UP_USER_ERROR:\n      return produce(state, draft => {\n        draft.loading.signUp = false;\n        draft.error.signUp = true;\n        draft.success.signUp = false;\n      });\n\n    case ActionTypes.SIGN_UP_USER_RESET:\n      return produce(state, draft => {\n        draft.loading.signUp = false;\n        draft.error.signUp = false;\n        draft.success.signUp = false;\n      });\n    // case \"addInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity++;\n    //       }\n    //     })\n    //   });\n    // case \"removeInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity--;\n    //       }\n    //     })\n    //   });\n    // case \"rentProduct\":\n\n    case ActionTypes.RENT_PRODUCT_REQUEST:\n      return produce(state, draft => {\n        draft.rentOrders.push(action.rentOrder);\n      });\n\n    case ActionTypes.PLACE_RENT_ORDERS_REQUEST:\n      return produce(state, draft => {\n        draft.error.placeRentOrders = false;\n        draft.success.placeRentOrders = false;\n        draft.loading.placeRentOrders = true;\n      });\n\n    case ActionTypes.PLACE_RENT_ORDERS_SUCCESS:\n      return produce(state, draft => {\n        draft.error.placeRentOrders = false;\n        draft.success.placeRentOrders = true;\n        draft.loading.placeRentOrders = false;\n        draft.rentOrders = [];\n      });\n\n    case ActionTypes.PLACE_RENT_ORDERS_ERROR:\n      return produce(state, draft => {\n        draft.error.placeRentOrders = true;\n        draft.success.placeRentOrders = false;\n        draft.loading.placeRentOrders = false;\n      });\n\n    case ActionTypes.LOAD_ALL_ORDERS_REQUEST:\n      return produce(state, draft => {\n        draft.error.loadAllOrders = false;\n        draft.success.loadAllOrders = false;\n        draft.loading.loadAllOrders = true;\n      });\n\n    case ActionTypes.LOAD_ALL_ORDERS_SUCCESS:\n      return produce(state, draft => {\n        draft.error.loadAllOrders = false;\n        draft.success.loadAllOrders = true;\n        draft.loading.loadAllOrders = false;\n        draft.orders = action.purchaseOrders;\n        draft.rentedProducts = action.rentOrders;\n      });\n\n    case ActionTypes.LOAD_ALL_ORDERS_ERROR:\n      return produce(state, draft => {\n        draft.error.loadAllOrders = true;\n        draft.success.loadAllOrders = false;\n        draft.loading.loadAllOrders = false;\n      });\n    // case \"removeProduct\":\n    // case ActionTypes.:\n    //   const newProductsArray: ProductModel[] = [];\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id !== action.productId){\n    //         newProductsArray.push(product);\n    //       }\n    //     })\n    //     draft.products = newProductsArray;\n    //   });\n    // case \"editUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.usersList = [];\n    //     let edited: boolean = false;\n    //     state.usersList.forEach((user) => {\n    //       if(!edited && user.id === action.id){\n    //         const newUser: User = {\n    //           id: action.id,\n    //           email: action.email,\n    //           password: user.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: user.role,\n    //         }\n    //         edited = true;\n    //         draft.user = newUser;\n    //         draft.usersList.push(newUser);\n    //       } else {\n    //         draft.usersList.push(user);\n    //       }\n    //     });\n    //   });\n    // case \"addAdmin\":\n    // case ActionTypes.:\n    //     return produce(state, draft => {\n    //       const admin: User = {\n    //           id: (state.usersList.length).toString(),\n    //           email: action.email,\n    //           password: action.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: 'admin',\n    //       }\n    //       draft.usersList.push(admin); \n    //     });\n    // case \"registerProduct\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     const product: ProductModel = {\n    //       id: (state.products.length+1).toString(),\n    //       img: action.img,\n    //       name: action.name,\n    //       price: action.price,\n    //       quantity: action.quantity,\n    //       type: action.category,\n    //       description: action.description,\n    //     }\n    //     draft.products.push(product);\n    //   });\n\n    case ActionTypes.MINUS_PRODUCT_IN_CART_REQUEST:\n      return produce(state, draft => {\n        if (state.cartProducts.has(action.id)) {\n          const selectedProduct = state.cartProducts.get(action.id);\n\n          if (selectedProduct.quantity === 1) {\n            draft.cartProducts.delete(action.id);\n          } else if (selectedProduct.quantity > 1) {\n            draft.cartProducts.set(action.id, { ...selectedProduct,\n              quantity: selectedProduct.quantity - 1\n            });\n          }\n        }\n      });\n\n    case ActionTypes.PLUS_PRODUCT_IN_CART_REQUEST:\n      return produce(state, draft => {\n        state.products.forEach(product => {\n          if (state.cartProducts.has(action.id)) {\n            const selectedProduct = state.cartProducts.get(action.id);\n\n            if (product.id === action.id && product.quantity - selectedProduct.quantity > 0) {\n              draft.cartProducts.set(action.id, { ...selectedProduct,\n                quantity: selectedProduct.quantity + 1\n              });\n            }\n          }\n        });\n      });\n    // case ActionTypes.LOG_OUT_REQUEST:\n    //   return produce(state, draft => {\n    //     draft.loading = true;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_SUCCESS:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_ERROR:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.error = true;\n    //     draft.user = null;\n    //   });\n    // case \"minusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1){\n    //         draft.cartProducts.delete(action.id);\n    //       }else if(selectedProduct.quantity > 1){\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n    // case \"plusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     state.products.forEach(product => {\n    //       if(state.cartProducts.has(action.id)){\n    //         const selectedProduct = state.cartProducts.get(action.id)!;\n    //         if(product.id === action.id && product.quantity - selectedProduct.quantity > 0){\n    //           draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n    //         }\n    //       }\n    //     });\n    //   });\n\n    case ActionTypes.LOG_OUT_REQUEST:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = false;\n        draft.user = null;\n      });\n    //  case ActionTypes.LOG_OUT_SUCCESS:\n    //    return produce(state, draft => {\n    //      draft.loading.logOut = false;\n    //      draft.success.logOut = true;\n    //      draft.user = null;\n    //    });\n    //  case ActionTypes.LOG_OUT_ERROR:\n    //    return produce(state, draft => {\n    //      draft.loading.logOut = false;\n    //      draft.error.logOut = true;\n    //    });\n    //  case ActionTypes.LOG_OUT_RESET:\n    //    return produce(state, draft => {\n    //      draft.loading.logOut = false;\n    //      draft.success.logOut = false;\n    //      draft.error.logOut = false;\n    //    })\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/src/store/reducer.ts"],"names":["produce","enableMapSet","mockedUsers","initialPossibleState","ActionTypes","initialState","loading","error","success","user","products","cartProducts","Map","rentOrders","rentedProducts","usersList","orders","reducer","state","action","type","LOAD_USER_REQUEST","draft","LOAD_USER_SUCCESS","localStorage","setItem","email","password","LOAD_USER_ERROR","LOAD_USER_RESET","LOAD_ALL_PRODUCTS_REQUEST","allProducts","LOAD_ALL_PRODUCTS_SUCCESS","LOAD_ALL_PRODUCTS_ERROR","ADD_PRODUCT_TO_CART_REQUEST","has","product","id","selectedProduct","get","set","quantity","REMOVE_PRODUCT_FROM_CART_RQUEST","delete","PLACE_PURCHASE_ORDER_REQUEST","placePurchaseOrder","PLACE_PURCHASE_ORDER_SUCCESS","PLACE_PURCHASE_ORDER_ERROR","PLACE_PURCHASE_ORDER_NOT_ASKED","CLEAR_PRODUCT_IN_CART_REQUEST","REMOVE_RENT_ORDER_REQUEST","forEach","order","orderId","push","SIGN_UP_USER_REQUEST","signUp","SIGN_UP_USER_SUCCESS","SIGN_UP_USER_ERROR","SIGN_UP_USER_RESET","RENT_PRODUCT_REQUEST","rentOrder","PLACE_RENT_ORDERS_REQUEST","placeRentOrders","PLACE_RENT_ORDERS_SUCCESS","PLACE_RENT_ORDERS_ERROR","LOAD_ALL_ORDERS_REQUEST","loadAllOrders","LOAD_ALL_ORDERS_SUCCESS","purchaseOrders","LOAD_ALL_ORDERS_ERROR","MINUS_PRODUCT_IN_CART_REQUEST","PLUS_PRODUCT_IN_CART_REQUEST","LOG_OUT_REQUEST"],"mappings":"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","sourcesContent":["import produce, { enableMapSet } from 'immer';\nimport { mockedUsers } from '../mock-objects/usersList';\nimport { products } from '../mock-objects/products';\nimport { ApplicationState, User, Order, ProductOrder, ProductModel, initialPossibleState } from './types';\nimport { ApplicationAction } from './actions';\nimport { ActionTypes } from './actionTypes';\nimport { loadUsersLocalStorage, loadUsersRequest } from './actionCreators';\n\nexport const initialState: ApplicationState = {\n  loading: initialPossibleState,\n  error: initialPossibleState,\n  success: initialPossibleState,\n  user: null,\n  products: [],\n  cartProducts: new Map(),\n  rentOrders: [],\n  rentedProducts: [],\n  usersList: mockedUsers,\n  orders: [],\n}\n\nconst reducer = (state = initialState, action: ApplicationAction) => {\n  enableMapSet();\n  \n  switch (action.type) {\n    case ActionTypes.LOAD_USER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.user = true;\n      });\n    case ActionTypes.LOAD_USER_SUCCESS:\n      return produce(state, draft => {\n      draft.loading.user = false;\n      draft.error.user = false;\n      localStorage.setItem('@plantshop/email', action.user.email);\n      localStorage.setItem('@plantshop/password', action.user.password);\n      draft.user = action.user;\n    });\n    case ActionTypes.LOAD_USER_ERROR:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = true;\n      });\n    case ActionTypes.LOAD_USER_RESET:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = false;\n      });\n    case ActionTypes.LOAD_ALL_PRODUCTS_REQUEST:\n      return produce(state, draft => {\n        draft.loading.allProducts = true;\n        draft.error.allProducts = false;\n      });\n      case ActionTypes.LOAD_ALL_PRODUCTS_SUCCESS:\n        return produce(state, draft => {\n        draft.loading.allProducts = false;\n        draft.error.allProducts = false;\n        draft.products = action.products;\n      });\n    case ActionTypes.LOAD_ALL_PRODUCTS_ERROR:\n      return produce(state, draft => {\n        draft.loading.allProducts = false;\n        draft.error.allProducts = true;\n      });\n    case ActionTypes.ADD_PRODUCT_TO_CART_REQUEST:\n      return produce(state, draft => {\n        if(state.cartProducts.has(action.product.id)){\n          const selectedProduct = state.cartProducts.get(action.product.id)!;\n          draft.cartProducts.set(action.product.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n        } else {\n          draft.cartProducts.set(action.product.id, action.product);\n        }\n      });\n    case ActionTypes.REMOVE_PRODUCT_FROM_CART_RQUEST:\n      return produce(state, draft => {\n        if(state.cartProducts.has(action.id)){\n          const selectedProduct = state.cartProducts.get(action.id)!;\n          draft.cartProducts.delete(action.id);          \n        }\n      });\n    case ActionTypes.PLACE_PURCHASE_ORDER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.placePurchaseOrder = true;\n        draft.error.placePurchaseOrder = false;\n        draft.success.placePurchaseOrder = false;\n      });\n    case ActionTypes.PLACE_PURCHASE_ORDER_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.placePurchaseOrder = false;\n        draft.error.placePurchaseOrder = false;\n        draft.success.placePurchaseOrder = true;\n        draft.cartProducts = new Map();\n      });\n    case ActionTypes.PLACE_PURCHASE_ORDER_ERROR:\n      return produce(state, draft => {\n        draft.loading.placePurchaseOrder = false;\n        draft.error.placePurchaseOrder = true;\n        draft.success.placePurchaseOrder = false;\n      });\n    case ActionTypes.PLACE_PURCHASE_ORDER_NOT_ASKED:\n      return produce(state, draft => {\n        draft.loading.placePurchaseOrder = false;\n        draft.error.placePurchaseOrder = false;\n        draft.success.placePurchaseOrder = false;\n      });\n    case ActionTypes.CLEAR_PRODUCT_IN_CART_REQUEST:\n      return produce(state, draft => {\n        draft.cartProducts = new Map();\n        draft.rentOrders = [];\n      });\n    case ActionTypes.REMOVE_RENT_ORDER_REQUEST:\n      return produce(state, draft => {\n        draft.rentOrders = [];\n        state.rentOrders.forEach((order) => {\n          if(order.orderId !== action.orderId) {\n            draft.rentOrders.push(order);\n          }\n        });\n      });\n    // case \"addProductToChart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.product.id)){\n    //       const selectedProduct = state.cartProducts.get(action.product.id)!;\n    //       draft.cartProducts.set(action.product.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n    //     } else {\n    //       draft.cartProducts.set(action.product.id, action.product);\n    //     }\n    //   });\n    // case \"removeProductToChart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1) {\n    //         draft.cartProducts.delete(action.id);\n    //       } else {\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n    // case \"placeOrder\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.size !== 0){\n    //       let totalPrice: number = 0;\n    //       let productsOrders: ProductOrder[] = [];\n          \n    //       state.cartProducts.forEach((product) => {\n    //         totalPrice += parseFloat(product.price) * product.quantity;\n\n    //         const newProductOrder: ProductOrder = {\n    //           id: product.id, \n    //           name: product.name, \n    //           price: product.price, \n    //           quantity: product.quantity\n    //         }\n\n    //         draft.products.forEach((value, idx) => {\n    //           if(value.id === product.id){\n    //             draft.products[idx].quantity -= product.quantity;\n    //           }\n    //         })\n\n    //         productsOrders.push(newProductOrder);\n    //       });\n          \n    //       var day = new Date();\n    //       var dd = day.getDate().toString();\n    //       var mm = (day.getMonth()+1).toString();\n    //       var yyyy = (day.getFullYear()).toString();\n    //       if(parseInt(dd) < 10){\n    //         dd = '0' + dd;\n    //       } \n    //       if(parseInt(mm)<10){\n    //         mm = '0' + mm;\n    //       } \n\n    //       const newOrder: Order = {\n    //         productsOrders: productsOrders,\n    //         date: dd + \"/\" + mm + \"/\" + yyyy,\n    //         total: totalPrice.toFixed(2),\n    //         status: \"Preparando para envio!\",\n    //       }\n\n    //       draft.orders = state.orders;\n    //       draft.orders.push(newOrder);\n    //     }\n\n    //     if(state.rentOrders.length !== 0) {\n    //       draft.rentedProducts = draft.rentedProducts.concat(draft.rentOrders);\n    //     }\n    //   });\n    // case \"clearCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.cartProducts = new Map();\n    //     draft.rentOrders = [];\n    //   });\n    // case \"removeRentOrder\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.rentOrders = [];\n    //     state.rentOrders.forEach((order) => {\n    //       if(order.orderId !== action.orderId) {\n    //         draft.rentOrders.push(order);\n    //       }\n    //     });\n    //   });\n    // case \"logInUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.user = action.user;\n    //   });\n    case ActionTypes.SIGN_UP_USER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.signUp = true;\n        draft.error.signUp = false;\n        draft.success.signUp = false;\n      });\n    case ActionTypes.SIGN_UP_USER_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.signUp = false;\n        draft.error.signUp = false;\n        draft.success.signUp = true; \n      });\n    case ActionTypes.SIGN_UP_USER_ERROR:\n      return produce(state, draft => {\n        draft.loading.signUp = false;\n        draft.error.signUp = true;\n        draft.success.signUp = false;\n      });\n    case ActionTypes.SIGN_UP_USER_RESET:\n      return produce(state, draft => {\n        draft.loading.signUp = false;\n        draft.error.signUp = false;\n        draft.success.signUp = false;\n      });\n    // case \"addInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity++;\n    //       }\n    //     })\n    //   });\n\n    // case \"removeInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity--;\n    //       }\n    //     })\n    //   });\n    // case \"rentProduct\":\n    case ActionTypes.RENT_PRODUCT_REQUEST:\n      return produce(state, draft => {\n        draft.rentOrders.push(action.rentOrder);\n      });\n    case ActionTypes.PLACE_RENT_ORDERS_REQUEST:\n      return produce(state, draft => {\n        draft.error.placeRentOrders = false;\n        draft.success.placeRentOrders = false;\n        draft.loading.placeRentOrders = true;\n      });\n    case ActionTypes.PLACE_RENT_ORDERS_SUCCESS:\n      return produce(state, draft => {\n        draft.error.placeRentOrders = false;\n        draft.success.placeRentOrders = true;\n        draft.loading.placeRentOrders = false;\n        draft.rentOrders = [];\n      });\n    case ActionTypes.PLACE_RENT_ORDERS_ERROR:\n      return produce(state, draft => {\n        draft.error.placeRentOrders = true;\n        draft.success.placeRentOrders = false;\n        draft.loading.placeRentOrders = false;\n      });\n    case ActionTypes.LOAD_ALL_ORDERS_REQUEST:\n      return produce(state, draft => {\n        draft.error.loadAllOrders = false;\n        draft.success.loadAllOrders = false;\n        draft.loading.loadAllOrders = true;\n      });\n    case ActionTypes.LOAD_ALL_ORDERS_SUCCESS:\n      return produce(state, draft => {\n        draft.error.loadAllOrders = false;\n        draft.success.loadAllOrders = true;\n        draft.loading.loadAllOrders = false;\n        draft.orders = action.purchaseOrders;\n        draft.rentedProducts = action.rentOrders;\n      });\n    case ActionTypes.LOAD_ALL_ORDERS_ERROR:\n      return produce(state, draft => {\n        draft.error.loadAllOrders = true;\n        draft.success.loadAllOrders = false;\n        draft.loading.loadAllOrders = false;\n      });\n    // case \"removeProduct\":\n    // case ActionTypes.:\n    //   const newProductsArray: ProductModel[] = [];\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id !== action.productId){\n    //         newProductsArray.push(product);\n    //       }\n    //     })\n\n    //     draft.products = newProductsArray;\n    //   });\n      \n    // case \"editUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.usersList = [];\n    //     let edited: boolean = false;\n    //     state.usersList.forEach((user) => {\n    //       if(!edited && user.id === action.id){\n    //         const newUser: User = {\n    //           id: action.id,\n    //           email: action.email,\n    //           password: user.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: user.role,\n    //         }\n    //         edited = true;\n    //         draft.user = newUser;\n    //         draft.usersList.push(newUser);\n            \n    //       } else {\n    //         draft.usersList.push(user);\n    //       }\n    //     });\n    //   });\n    // case \"addAdmin\":\n    // case ActionTypes.:\n    //     return produce(state, draft => {\n    //       const admin: User = {\n    //           id: (state.usersList.length).toString(),\n    //           email: action.email,\n    //           password: action.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: 'admin',\n    //       }\n    //       draft.usersList.push(admin); \n    //     });\n    // case \"registerProduct\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     const product: ProductModel = {\n    //       id: (state.products.length+1).toString(),\n    //       img: action.img,\n    //       name: action.name,\n    //       price: action.price,\n    //       quantity: action.quantity,\n    //       type: action.category,\n    //       description: action.description,\n    //     }\n    //     draft.products.push(product);\n    //   });\n    case ActionTypes.MINUS_PRODUCT_IN_CART_REQUEST:\n      return produce(state, draft => {\n        if(state.cartProducts.has(action.id)){\n          const selectedProduct = state.cartProducts.get(action.id)!;\n          if(selectedProduct.quantity === 1){\n            draft.cartProducts.delete(action.id);\n          }else if(selectedProduct.quantity > 1){\n            draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n          }\n        }\n      });\n    case ActionTypes.PLUS_PRODUCT_IN_CART_REQUEST:\n      return produce(state, draft => {\n        state.products.forEach(product => {\n          if(state.cartProducts.has(action.id)){\n            const selectedProduct = state.cartProducts.get(action.id)!;\n            if(product.id === action.id && product.quantity - selectedProduct.quantity > 0){\n              draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n            }\n          }\n        });\n      });\n    // case ActionTypes.LOG_OUT_REQUEST:\n    //   return produce(state, draft => {\n    //     draft.loading = true;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_SUCCESS:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_ERROR:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.error = true;\n    //     draft.user = null;\n    //   });\n    // case \"minusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1){\n    //         draft.cartProducts.delete(action.id);\n    //       }else if(selectedProduct.quantity > 1){\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n    // case \"plusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     state.products.forEach(product => {\n    //       if(state.cartProducts.has(action.id)){\n    //         const selectedProduct = state.cartProducts.get(action.id)!;\n    //         if(product.id === action.id && product.quantity - selectedProduct.quantity > 0){\n    //           draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n    //         }\n    //       }\n    //     });\n    //   });\n    case ActionTypes.LOG_OUT_REQUEST:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = false;\n        draft.user = null;\n      });\n  //  case ActionTypes.LOG_OUT_SUCCESS:\n  //    return produce(state, draft => {\n  //      draft.loading.logOut = false;\n  //      draft.success.logOut = true;\n  //      draft.user = null;\n  //    });\n  //  case ActionTypes.LOG_OUT_ERROR:\n  //    return produce(state, draft => {\n  //      draft.loading.logOut = false;\n  //      draft.error.logOut = true;\n  //    });\n  //  case ActionTypes.LOG_OUT_RESET:\n  //    return produce(state, draft => {\n  //      draft.loading.logOut = false;\n  //      draft.success.logOut = false;\n  //      draft.error.logOut = false;\n  //    })\n    default:\n      return state;\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}