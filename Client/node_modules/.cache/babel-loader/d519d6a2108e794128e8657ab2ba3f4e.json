{"ast":null,"code":"import produce from 'immer';\nimport { mockedUsers } from '../mock-objects/usersList';\nimport { products } from '../mock-objects/products';\nexport const initialState = {\n  loading: {\n    user: false\n  },\n  user: null,\n  products: products,\n  cartProducts: new Map(),\n  usersList: mockedUsers,\n  orders: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"loadUsersRequest\":\n      return produce(state, draft => {\n        draft.loading.user = true;\n      });\n\n    case \"loadUsersSuccess\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.user = action.user;\n      });\n\n    case \"loadUsersError\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n      });\n\n    case \"addProductToChart\":\n      return produce(state, draft => {\n        if (state.cartProducts.has(action.product.id)) {\n          const selectedProduct = state.cartProducts.get(action.product.id);\n          draft.cartProducts.set(action.product.id, { ...selectedProduct,\n            quantity: selectedProduct.quantity + 1\n          });\n        } else {\n          draft.cartProducts.set(action.product.id, action.product);\n        }\n      });\n\n    case \"removeProductToChart\":\n      return produce(state, draft => {\n        if (state.cartProducts.has(action.id)) {\n          const selectedProduct = state.cartProducts.get(action.id);\n\n          if (selectedProduct.quantity == 1) {\n            draft.cartProducts.delete(action.id);\n          } else {\n            draft.cartProducts.set(action.id, { ...selectedProduct,\n              quantity: selectedProduct.quantity - 1\n            });\n          }\n        }\n      });\n\n    case \"placeOrder\":\n      return produce(state, draft => {\n        const date = new Date();\n        let totalPrice = 0;\n        let productsOrders = [];\n        state.cartProducts.forEach(product => {\n          totalPrice += parseFloat(product.price) * product.quantity;\n          const newProductOrder = {\n            id: product.id,\n            name: product.name,\n            price: product.price,\n            quantity: product.quantity\n          };\n          productsOrders.push(newProductOrder);\n        });\n        const newOrder = {\n          productsOrders: productsOrders,\n          date: date.getDate() + \"/\" + date.getMonth() + \"/\" + date.getFullYear(),\n          total: totalPrice.toFixed(2),\n          status: \"Preparando para envio!\"\n        };\n        draft.orders = state.orders;\n        draft.orders.push(newOrder);\n      });\n\n    case \"clearCart\":\n      return produce(state, draft => {\n        draft.cartProducts = new Map();\n      });\n\n    case \"logInUser\":\n      return produce(state, draft => {\n        draft.user = action.user;\n      });\n\n    case \"signUpUser\":\n      return produce(state, draft => {\n        const user = {\n          id: state.usersList.length.toString(),\n          email: action.email,\n          password: action.password,\n          name: action.name,\n          address: action.address,\n          phoneNumber: action.phoneNumber,\n          role: 'user'\n        };\n        draft.user = user;\n        draft.usersList.push(draft.user);\n      });\n\n    case \"addInventory\":\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if (product.id === action.productId) {\n            draft.products[index].quantity++;\n          }\n        });\n      });\n\n    case \"removeInventory\":\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if (product.id === action.productId) {\n            draft.products[index].quantity--;\n          }\n        });\n      });\n\n    case \"removeProduct\":\n      const newProductsArray = [];\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if (product.id !== action.productId) {\n            newProductsArray.push(product);\n          }\n        });\n        draft.products = newProductsArray;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/ps/src/store/reducer.ts"],"names":["produce","mockedUsers","products","initialState","loading","user","cartProducts","Map","usersList","orders","reducer","state","action","type","draft","has","product","id","selectedProduct","get","set","quantity","delete","date","Date","totalPrice","productsOrders","forEach","parseFloat","price","newProductOrder","name","push","newOrder","getDate","getMonth","getFullYear","total","toFixed","status","length","toString","email","password","address","phoneNumber","role","index","productId","newProductsArray"],"mappings":"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","sourcesContent":["import produce from 'immer';\nimport { mockedUsers } from '../mock-objects/usersList';\nimport { products } from '../mock-objects/products';\nimport { ApplicationState, ApplicationAction, User, Order, ProductOrder, ProductModel } from './types';\n\nexport const initialState: ApplicationState = {\n  loading: {\n    user: false,\n  },\n  user: null,\n  products: products,\n  cartProducts: new Map(),\n  usersList: mockedUsers,\n  orders: [],\n}\n\nconst reducer = (state = initialState, action: ApplicationAction) => {\n  switch (action.type) {\n    case \"loadUsersRequest\":\n      return produce(state, draft => {\n        draft.loading.user = true;\n      });\n    case \"loadUsersSuccess\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.user = action.user;\n      });\n    case \"loadUsersError\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n      });\n    case \"addProductToChart\":\n      return produce(state, draft => {\n        if(state.cartProducts.has(action.product.id)){\n          const selectedProduct = state.cartProducts.get(action.product.id)!;\n          draft.cartProducts.set(action.product.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n        } else {\n          draft.cartProducts.set(action.product.id, action.product);\n        }\n      });\n    case \"removeProductToChart\":\n      return produce(state, draft => {\n        if(state.cartProducts.has(action.id)){\n          const selectedProduct = state.cartProducts.get(action.id)!;\n          if(selectedProduct.quantity == 1) {\n            draft.cartProducts.delete(action.id);\n          } else {\n            draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n          }\n        }\n      });\n    case \"placeOrder\":\n      return produce(state, draft => {\n\n        const date = new Date();\n        let totalPrice: number = 0;\n        let productsOrders: ProductOrder[] = [];\n        \n        state.cartProducts.forEach((product) => {\n          totalPrice += parseFloat(product.price) * product.quantity;\n\n          const newProductOrder: ProductOrder = {\n            id: product.id, \n            name: product.name, \n            price: product.price, \n            quantity: product.quantity\n          }\n          productsOrders.push(newProductOrder);\n        });\n        \n        const newOrder: Order ={\n          productsOrders: productsOrders,\n          date: date.getDate() + \"/\" + date.getMonth() + \"/\" + date.getFullYear(),\n          total: totalPrice.toFixed(2),\n          status: \"Preparando para envio!\",\n        }\n        draft.orders = state.orders;\n        draft.orders.push(newOrder);\n      });\n    case \"clearCart\":\n      return produce(state, draft => {\n        draft.cartProducts = new Map();\n      });\n    case \"logInUser\":\n      return produce(state, draft => {\n        draft.user = action.user;\n      });\n    case \"signUpUser\":\n      return produce(state, draft => {\n        const user: User = {\n            id: (state.usersList.length).toString(),\n            email: action.email,\n            password: action.password,\n            name: action.name,\n            address: action.address,\n            phoneNumber: action.phoneNumber,\n            role: 'user',\n        }\n        draft.user = user;\n        draft.usersList.push(draft.user); \n      });\n    case \"addInventory\":\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if(product.id === action.productId){\n            draft.products[index].quantity++;\n          }\n        })\n      });\n\n    case \"removeInventory\":\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if(product.id === action.productId){\n            draft.products[index].quantity--;\n          }\n        })\n      });\n      \n    case \"removeProduct\":\n      const newProductsArray: ProductModel[] = [];\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if(product.id !== action.productId){\n            newProductsArray.push(product);\n          }\n        })\n\n        draft.products = newProductsArray;\n      });\n    default:\n      return state;\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}