{"ast":null,"code":"import produce, { enableMapSet } from 'immer';\nimport { mockedUsers } from '../mock-objects/usersList';\nimport { products } from '../mock-objects/products';\nimport { ActionTypes } from './actionTypes';\nexport const initialState = {\n  loading: {\n    user: false\n  },\n  error: {\n    user: false\n  },\n  user: null,\n  products: products,\n  cartProducts: new Map(),\n  rentOrders: [],\n  rentedProducts: [],\n  usersList: mockedUsers,\n  orders: []\n};\n\nconst reducer = (state = initialState, action) => {\n  enableMapSet();\n\n  switch (action.type) {\n    case ActionTypes.LOAD_USER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.user = true;\n        draft.error.user = false;\n      });\n\n    case ActionTypes.LOAD_USER_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = false;\n        draft.user = action.user;\n      });\n\n    case ActionTypes.LOAD_USER_ERROR:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = true;\n      });\n    // case \"addProductToChart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.product.id)){\n    //       const selectedProduct = state.cartProducts.get(action.product.id)!;\n    //       draft.cartProducts.set(action.product.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n    //     } else {\n    //       draft.cartProducts.set(action.product.id, action.product);\n    //     }\n    //   });\n    // case \"removeProductToChart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1) {\n    //         draft.cartProducts.delete(action.id);\n    //       } else {\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n    // case \"placeOrder\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.size !== 0){\n    //       let totalPrice: number = 0;\n    //       let productsOrders: ProductOrder[] = [];\n    //       state.cartProducts.forEach((product) => {\n    //         totalPrice += parseFloat(product.price) * product.quantity;\n    //         const newProductOrder: ProductOrder = {\n    //           id: product.id, \n    //           name: product.name, \n    //           price: product.price, \n    //           quantity: product.quantity\n    //         }\n    //         draft.products.forEach((value, idx) => {\n    //           if(value.id === product.id){\n    //             draft.products[idx].quantity -= product.quantity;\n    //           }\n    //         })\n    //         productsOrders.push(newProductOrder);\n    //       });\n    //       var day = new Date();\n    //       var dd = day.getDate().toString();\n    //       var mm = (day.getMonth()+1).toString();\n    //       var yyyy = (day.getFullYear()).toString();\n    //       if(parseInt(dd) < 10){\n    //         dd = '0' + dd;\n    //       } \n    //       if(parseInt(mm)<10){\n    //         mm = '0' + mm;\n    //       } \n    //       const newOrder: Order = {\n    //         productsOrders: productsOrders,\n    //         date: dd + \"/\" + mm + \"/\" + yyyy,\n    //         total: totalPrice.toFixed(2),\n    //         status: \"Preparando para envio!\",\n    //       }\n    //       draft.orders = state.orders;\n    //       draft.orders.push(newOrder);\n    //     }\n    //     if(state.rentOrders.length !== 0) {\n    //       draft.rentedProducts = draft.rentedProducts.concat(draft.rentOrders);\n    //     }\n    //   });\n    // case \"clearCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.cartProducts = new Map();\n    //     draft.rentOrders = [];\n    //   });\n    // case \"removeRentOrder\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.rentOrders = [];\n    //     state.rentOrders.forEach((order) => {\n    //       if(order.orderId !== action.orderId) {\n    //         draft.rentOrders.push(order);\n    //       }\n    //     });\n    //   });\n    // case \"logInUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.user = action.user;\n    //   });\n    // case \"signUpUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     const user: User = {\n    //         id: (state.usersList.length).toString(),\n    //         email: action.email,\n    //         password: action.password,\n    //         name: action.name,\n    //         address: action.address,\n    //         phoneNumber: action.phoneNumber,\n    //         role: 'user',\n    //     }\n    //     draft.user = user;\n    //     draft.usersList.push(draft.user); \n    //   });\n    // case \"addInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity++;\n    //       }\n    //     })\n    //   });\n    // case \"removeInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity--;\n    //       }\n    //     })\n    //   });\n    // case \"rentProduct\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.rentOrders.push(action.rentOrder);\n    //   });\n    // case \"removeProduct\":\n    // case ActionTypes.:\n    //   const newProductsArray: ProductModel[] = [];\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id !== action.productId){\n    //         newProductsArray.push(product);\n    //       }\n    //     })\n    //     draft.products = newProductsArray;\n    //   });\n    // case \"editUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.usersList = [];\n    //     let edited: boolean = false;\n    //     state.usersList.forEach((user) => {\n    //       if(!edited && user.id === action.id){\n    //         const newUser: User = {\n    //           id: action.id,\n    //           email: action.email,\n    //           password: user.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: user.role,\n    //         }\n    //         edited = true;\n    //         draft.user = newUser;\n    //         draft.usersList.push(newUser);\n    //       } else {\n    //         draft.usersList.push(user);\n    //       }\n    //     });\n    //   });\n    // case \"addAdmin\":\n    // case ActionTypes.:\n    //     return produce(state, draft => {\n    //       const admin: User = {\n    //           id: (state.usersList.length).toString(),\n    //           email: action.email,\n    //           password: action.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: 'admin',\n    //       }\n    //       draft.usersList.push(admin); \n    //     });\n    // case \"registerProduct\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     const product: ProductModel = {\n    //       id: (state.products.length+1).toString(),\n    //       img: action.img,\n    //       name: action.name,\n    //       price: action.price,\n    //       quantity: action.quantity,\n    //       type: action.category,\n    //       description: action.description,\n    //     }\n    //     draft.products.push(product);\n    //   });\n    // case \"minusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1){\n    //         draft.cartProducts.delete(action.id);\n    //       }else if(selectedProduct.quantity > 1){\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n    // case \"plusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     state.products.forEach(product => {\n    //       if(state.cartProducts.has(action.id)){\n    //         const selectedProduct = state.cartProducts.get(action.id)!;\n    //         if(product.id === action.id && product.quantity - selectedProduct.quantity > 0){\n    //           draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n    //         }\n    //       }\n    //     });\n    //   });\n    // case ActionTypes.LOG_OUT_REQUEST:\n    //   return produce(state, draft => {\n    //     draft.loading = true;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_SUCCESS:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_ERROR:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.error = true;\n    //     draft.user = null;\n    //   });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/src/store/reducer.ts"],"names":["produce","enableMapSet","mockedUsers","products","ActionTypes","initialState","loading","user","error","cartProducts","Map","rentOrders","rentedProducts","usersList","orders","reducer","state","action","type","LOAD_USER_REQUEST","draft","LOAD_USER_SUCCESS","LOAD_USER_ERROR"],"mappings":"AAAA,OAAOA,OAAP,IAAkBC,YAAlB,QAAsC,OAAtC;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AAGA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAO,MAAMC,YAA8B,GAAG;AAC5CC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AADC,GADmC;AAI5CC,EAAAA,KAAK,EAAE;AACLD,IAAAA,IAAI,EAAE;AADD,GAJqC;AAO5CA,EAAAA,IAAI,EAAE,IAPsC;AAQ5CJ,EAAAA,QAAQ,EAAEA,QARkC;AAS5CM,EAAAA,YAAY,EAAE,IAAIC,GAAJ,EAT8B;AAU5CC,EAAAA,UAAU,EAAE,EAVgC;AAW5CC,EAAAA,cAAc,EAAE,EAX4B;AAY5CC,EAAAA,SAAS,EAAEX,WAZiC;AAa5CY,EAAAA,MAAM,EAAE;AAboC,CAAvC;;AAgBP,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAqD;AACnEhB,EAAAA,YAAY;;AAEZ,UAAQgB,MAAM,CAACC,IAAf;AACE,SAAKd,WAAW,CAACe,iBAAjB;AACE,aAAOnB,OAAO,CAACgB,KAAD,EAAQI,KAAK,IAAI;AAC7BA,QAAAA,KAAK,CAACd,OAAN,CAAcC,IAAd,GAAqB,IAArB;AACAa,QAAAA,KAAK,CAACZ,KAAN,CAAYD,IAAZ,GAAmB,KAAnB;AACD,OAHa,CAAd;;AAIA,SAAKH,WAAW,CAACiB,iBAAjB;AACE,aAAOrB,OAAO,CAACgB,KAAD,EAAQI,KAAK,IAAI;AAC/BA,QAAAA,KAAK,CAACd,OAAN,CAAcC,IAAd,GAAqB,KAArB;AACAa,QAAAA,KAAK,CAACZ,KAAN,CAAYD,IAAZ,GAAmB,KAAnB;AACAa,QAAAA,KAAK,CAACb,IAAN,GAAaU,MAAM,CAACV,IAApB;AACD,OAJe,CAAd;;AAKJ,SAAKH,WAAW,CAACkB,eAAjB;AACE,aAAOtB,OAAO,CAACgB,KAAD,EAAQI,KAAK,IAAI;AAC7BA,QAAAA,KAAK,CAACd,OAAN,CAAcC,IAAd,GAAqB,KAArB;AACAa,QAAAA,KAAK,CAACZ,KAAN,CAAYD,IAAZ,GAAmB,IAAnB;AACD,OAHa,CAAdaAAOS,KAAP;AAlQJ;AAoQD,CAvQD;;AAyQA,eAAeD,OAAf","sourcesContent":["import produce, { enableMapSet } from 'immer';\nimport { mockedUsers } from '../mock-objects/usersList';\nimport { products } from '../mock-objects/products';\nimport { ApplicationState, User, Order, ProductOrder, ProductModel } from './types';\nimport { ApplicationAction } from './actions';\nimport { ActionTypes } from './actionTypes';\n\nexport const initialState: ApplicationState = {\n  loading: {\n    user: false,\n  },\n  error: {\n    user: false,\n  },\n  user: null,\n  products: products,\n  cartProducts: new Map(),\n  rentOrders: [],\n  rentedProducts: [],\n  usersList: mockedUsers,\n  orders: [],\n}\n\nconst reducer = (state = initialState, action: ApplicationAction) => {\n  enableMapSet();\n  \n  switch (action.type) {\n    case ActionTypes.LOAD_USER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.user = true;\n        draft.error.user = false;\n      });\n      case ActionTypes.LOAD_USER_SUCCESS:\n        return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = false;\n        draft.user = action.user;\n      });\n    case ActionTypes.LOAD_USER_ERROR:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = true;\n      });\n    // case \"addProductToChart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.product.id)){\n    //       const selectedProduct = state.cartProducts.get(action.product.id)!;\n    //       draft.cartProducts.set(action.product.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n    //     } else {\n    //       draft.cartProducts.set(action.product.id, action.product);\n    //     }\n    //   });\n    // case \"removeProductToChart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1) {\n    //         draft.cartProducts.delete(action.id);\n    //       } else {\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n    // case \"placeOrder\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.size !== 0){\n    //       let totalPrice: number = 0;\n    //       let productsOrders: ProductOrder[] = [];\n          \n    //       state.cartProducts.forEach((product) => {\n    //         totalPrice += parseFloat(product.price) * product.quantity;\n\n    //         const newProductOrder: ProductOrder = {\n    //           id: product.id, \n    //           name: product.name, \n    //           price: product.price, \n    //           quantity: product.quantity\n    //         }\n\n    //         draft.products.forEach((value, idx) => {\n    //           if(value.id === product.id){\n    //             draft.products[idx].quantity -= product.quantity;\n    //           }\n    //         })\n\n    //         productsOrders.push(newProductOrder);\n    //       });\n          \n    //       var day = new Date();\n    //       var dd = day.getDate().toString();\n    //       var mm = (day.getMonth()+1).toString();\n    //       var yyyy = (day.getFullYear()).toString();\n    //       if(parseInt(dd) < 10){\n    //         dd = '0' + dd;\n    //       } \n    //       if(parseInt(mm)<10){\n    //         mm = '0' + mm;\n    //       } \n\n    //       const newOrder: Order = {\n    //         productsOrders: productsOrders,\n    //         date: dd + \"/\" + mm + \"/\" + yyyy,\n    //         total: totalPrice.toFixed(2),\n    //         status: \"Preparando para envio!\",\n    //       }\n\n    //       draft.orders = state.orders;\n    //       draft.orders.push(newOrder);\n    //     }\n\n    //     if(state.rentOrders.length !== 0) {\n    //       draft.rentedProducts = draft.rentedProducts.concat(draft.rentOrders);\n    //     }\n    //   });\n    // case \"clearCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.cartProducts = new Map();\n    //     draft.rentOrders = [];\n    //   });\n    // case \"removeRentOrder\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.rentOrders = [];\n    //     state.rentOrders.forEach((order) => {\n    //       if(order.orderId !== action.orderId) {\n    //         draft.rentOrders.push(order);\n    //       }\n    //     });\n    //   });\n    // case \"logInUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.user = action.user;\n    //   });\n    // case \"signUpUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     const user: User = {\n    //         id: (state.usersList.length).toString(),\n    //         email: action.email,\n    //         password: action.password,\n    //         name: action.name,\n    //         address: action.address,\n    //         phoneNumber: action.phoneNumber,\n    //         role: 'user',\n    //     }\n    //     draft.user = user;\n    //     draft.usersList.push(draft.user); \n    //   });\n    // case \"addInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity++;\n    //       }\n    //     })\n    //   });\n\n    // case \"removeInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity--;\n    //       }\n    //     })\n    //   });\n    // case \"rentProduct\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.rentOrders.push(action.rentOrder);\n    //   });\n    // case \"removeProduct\":\n    // case ActionTypes.:\n    //   const newProductsArray: ProductModel[] = [];\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id !== action.productId){\n    //         newProductsArray.push(product);\n    //       }\n    //     })\n\n    //     draft.products = newProductsArray;\n    //   });\n      \n    // case \"editUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.usersList = [];\n    //     let edited: boolean = false;\n    //     state.usersList.forEach((user) => {\n    //       if(!edited && user.id === action.id){\n    //         const newUser: User = {\n    //           id: action.id,\n    //           email: action.email,\n    //           password: user.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: user.role,\n    //         }\n    //         edited = true;\n    //         draft.user = newUser;\n    //         draft.usersList.push(newUser);\n            \n    //       } else {\n    //         draft.usersList.push(user);\n    //       }\n    //     });\n    //   });\n    // case \"addAdmin\":\n    // case ActionTypes.:\n    //     return produce(state, draft => {\n    //       const admin: User = {\n    //           id: (state.usersList.length).toString(),\n    //           email: action.email,\n    //           password: action.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: 'admin',\n    //       }\n    //       draft.usersList.push(admin); \n    //     });\n    // case \"registerProduct\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     const product: ProductModel = {\n    //       id: (state.products.length+1).toString(),\n    //       img: action.img,\n    //       name: action.name,\n    //       price: action.price,\n    //       quantity: action.quantity,\n    //       type: action.category,\n    //       description: action.description,\n    //     }\n    //     draft.products.push(product);\n    //   });\n    // case \"minusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1){\n    //         draft.cartProducts.delete(action.id);\n    //       }else if(selectedProduct.quantity > 1){\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n    // case \"plusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     state.products.forEach(product => {\n    //       if(state.cartProducts.has(action.id)){\n    //         const selectedProduct = state.cartProducts.get(action.id)!;\n    //         if(product.id === action.id && product.quantity - selectedProduct.quantity > 0){\n    //           draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n    //         }\n    //       }\n    //     });\n    //   });\n    // case ActionTypes.LOG_OUT_REQUEST:\n    //   return produce(state, draft => {\n    //     draft.loading = true;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_SUCCESS:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_ERROR:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.error = true;\n    //     draft.user = null;\n    //   });\n    default:\n      return state;\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}