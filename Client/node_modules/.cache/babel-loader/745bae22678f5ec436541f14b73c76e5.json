{"ast":null,"code":"import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { loadAllProductsError, loadAllProductsSuccess, loadUsersError, loadUsersSuccess, placePurchaseOrderError, placePurchaseOrderSuccess, signUpUserError, signUpUserSuccess } from './actionCreators';\nimport { ActionTypes } from './actionTypes';\nimport ApiRequester from './apiRequester'; // worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* fetchUser(action) {\n  try {\n    const user = yield call(ApiRequester.authenticateUser, action.email, action.password);\n    yield put(user.name === undefined ? loadUsersError() : loadUsersSuccess(user));\n  } catch (e) {\n    yield put(loadUsersError());\n  }\n}\n\nfunction* signUpUserSagas(action) {\n  try {\n    const user = yield call(ApiRequester.registerUser, action.name, action.address, action.phoneNumber, action.email, action.password);\n    console.log(user);\n    yield put(signUpUserSuccess());\n  } catch (e) {\n    yield put(signUpUserError());\n  }\n}\n\nfunction* loadAllProductsSagas() {\n  try {\n    const products = yield call(ApiRequester.getAllProducts);\n    yield put(products.length === 0 ? loadAllProductsError() : loadAllProductsSuccess(products));\n  } catch (e) {\n    yield put(loadAllProductsError());\n  }\n}\n\nfunction* placePurchaseOrderSagas(action) {\n  try {\n    const products = yield call(ApiRequester.placePurchaseOrder, action.user, action.order);\n    yield put(placePurchaseOrderSuccess());\n  } catch (e) {\n    yield put(placePurchaseOrderError());\n  }\n}\n\nfunction* placeRentOrdersSagas(action) {\n  try {\n    const response = yield call(ApiRequester.placeRentOrders, action.user, action.rentOrders);\n    yield put((response === null || response === void 0 ? void 0 : response.status) === 200 ? placePurchaseOrderSuccess() : placePurchaseOrderError());\n  } catch (e) {\n    yield put(placePurchaseOrderError());\n  }\n}\n\nfunction* mySaga() {\n  yield all([takeLatest(ActionTypes.LOAD_USER_REQUEST, fetchUser), takeLatest(ActionTypes.LOAD_ALL_PRODUCTS_REQUEST, loadAllProductsSagas), takeLatest(ActionTypes.SING_UP_USER_REQUEST, signUpUserSagas), takeLatest(ActionTypes.PLACE_PURCHASE_ORDER_REQUEST, placePurchaseOrderSagas), takeLatest(ActionTypes.PLACE_RENT_ORDERS_REQUEST, placeRentOrdersSagas)]);\n}\n\nexport default mySaga;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/src/store/sagas.ts"],"names":["all","call","put","takeLatest","loadAllProductsError","loadAllProductsSuccess","loadUsersError","loadUsersSuccess","placePurchaseOrderError","placePurchaseOrderSuccess","signUpUserError","signUpUserSuccess","ActionTypes","ApiRequester","fetchUser","action","user","authenticateUser","email","password","name","undefined","e","signUpUserSagas","registerUser","address","phoneNumber","console","log","loadAllProductsSagas","products","getAllProducts","length","placePurchaseOrderSagas","placePurchaseOrder","order","placeRentOrdersSagas","response","placeRentOrders","rentOrders","status","mySaga","LOAD_USER_REQUEST","LOAD_ALL_PRODUCTS_REQUEST","SING_UP_USER_REQUEST","PLACE_PURCHASE_ORDER_REQUEST","PLACE_RENT_ORDERS_REQUEST"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest } from 'redux-saga/effects'\nimport { loadAllProductsError, loadAllProductsSuccess, loadUsersError, loadUsersSuccess, placePurchaseOrderError, placePurchaseOrderSuccess, signUpUserError, signUpUserSuccess } from './actionCreators';\nimport { LoadAllProductsRequest, LoadUsersRequest, PlacePurchaseOrderRequest, PlaceRentOrdersRequest, SignUpUserRequest } from './actions';\nimport { ActionTypes } from './actionTypes';\nimport ApiRequester from './apiRequester'\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* fetchUser(action: LoadUsersRequest) : any {\n  try {\n    const user = yield call(ApiRequester.authenticateUser, action.email, action.password);\n    yield put(user.name === undefined ? loadUsersError() : loadUsersSuccess(user));\n  } catch (e) {\n    yield put(loadUsersError());\n  }\n}\n\nfunction* signUpUserSagas(action: SignUpUserRequest) : any {\n  try {\n    const user = yield call(ApiRequester.registerUser, action.name, action.address, action.phoneNumber, action.email, action.password);\n    console.log(user);\n    yield put(signUpUserSuccess());\n  } catch (e) {\n    yield put(signUpUserError());\n  }\n}\n\nfunction* loadAllProductsSagas() : any {\n  try {\n    const products = yield call(ApiRequester.getAllProducts);\n    yield put(products.length === 0 ? loadAllProductsError() : loadAllProductsSuccess(products));\n  } catch (e) {\n    yield put(loadAllProductsError());\n  }\n}\n\nfunction* placePurchaseOrderSagas(action: PlacePurchaseOrderRequest) : any {\n  try {\n    const products = yield call(ApiRequester.placePurchaseOrder, action.user, action.order);\n    yield put(placePurchaseOrderSuccess());\n  } catch (e) {\n    yield put(placePurchaseOrderError());\n  }\n}\n\nfunction* placeRentOrdersSagas(action: PlaceRentOrdersRequest) : any {\n  try {\n    const response = yield call(ApiRequester.placeRentOrders, action.user, action.rentOrders);\n    yield put(response?.status=== 200? placePurchaseOrderSuccess() : placePurchaseOrderError());\n  } catch (e) {\n    yield put(placePurchaseOrderError());\n  }\n}\n\nfunction* mySaga() {\n  yield all([\n    takeLatest(ActionTypes.LOAD_USER_REQUEST, fetchUser),\n    takeLatest(ActionTypes.LOAD_ALL_PRODUCTS_REQUEST, loadAllProductsSagas),\n    takeLatest(ActionTypes.SING_UP_USER_REQUEST, signUpUserSagas),\n    takeLatest(ActionTypes.PLACE_PURCHASE_ORDER_REQUEST, placePurchaseOrderSagas),\n    takeLatest(ActionTypes.PLACE_RENT_ORDERS_REQUEST, placeRentOrdersSagas)\n  ]);\n}\n\nexport default mySaga;"]},"metadata":{},"sourceType":"module"}