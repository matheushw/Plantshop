{"ast":null,"code":"import produce, { enableMapSet } from 'immer';\nimport { mockedUsers } from '../mock-objects/usersList';\nimport { products } from '../mock-objects/products';\nexport const initialState = {\n  loading: {\n    user: false\n  },\n  user: null,\n  products: products,\n  cartProducts: new Map(),\n  rentOrders: [],\n  rentedProducts: [],\n  usersList: mockedUsers,\n  orders: []\n};\n\nconst reducer = (state = initialState, action) => {\n  enableMapSet();\n\n  switch (action.type) {\n    case \"loadUsersRequest\":\n      return produce(state, draft => {\n        draft.loading.user = true;\n      });\n\n    case \"loadUsersSuccess\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.user = action.user;\n      });\n\n    case \"loadUsersError\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n      });\n\n    case \"addProductToChart\":\n      return produce(state, draft => {\n        if (state.cartProducts.has(action.product.id)) {\n          const selectedProduct = state.cartProducts.get(action.product.id);\n          draft.cartProducts.set(action.product.id, { ...selectedProduct,\n            quantity: selectedProduct.quantity + 1\n          });\n        } else {\n          draft.cartProducts.set(action.product.id, action.product);\n        }\n      });\n\n    case \"removeProductToChart\":\n      return produce(state, draft => {\n        if (state.cartProducts.has(action.id)) {\n          const selectedProduct = state.cartProducts.get(action.id);\n\n          if (selectedProduct.quantity === 1) {\n            draft.cartProducts.delete(action.id);\n          } else {\n            draft.cartProducts.set(action.id, { ...selectedProduct,\n              quantity: selectedProduct.quantity - 1\n            });\n          }\n        }\n      });\n\n    case \"placeOrder\":\n      return produce(state, draft => {\n        if (state.cartProducts.size !== 0) {\n          let totalPrice = 0;\n          let productsOrders = [];\n          state.cartProducts.forEach(product => {\n            totalPrice += parseFloat(product.price) * product.quantity;\n            const newProductOrder = {\n              id: product.id,\n              name: product.name,\n              price: product.price,\n              quantity: product.quantity\n            };\n            draft.products.forEach((value, idx) => {\n              if (value.id === product.id) {\n                draft.products[idx].quantity -= product.quantity;\n              }\n            });\n            productsOrders.push(newProductOrder);\n          });\n          var day = new Date();\n          var dd = day.getDate().toString();\n          var mm = (day.getMonth() + 1).toString();\n          var yyyy = day.getFullYear().toString();\n\n          if (parseInt(dd) < 10) {\n            dd = '0' + dd;\n          }\n\n          if (parseInt(mm) < 10) {\n            mm = '0' + mm;\n          }\n\n          const newOrder = {\n            productsOrders: productsOrders,\n            date: dd + \"/\" + mm + \"/\" + yyyy,\n            total: totalPrice.toFixed(2),\n            status: \"Preparando para envio!\"\n          };\n          draft.orders = state.orders;\n          draft.orders.push(newOrder);\n        }\n\n        if (state.rentOrders.length !== 0) {\n          draft.rentedProducts = draft.rentedProducts.concat(draft.rentOrders);\n        }\n      });\n\n    case \"clearCart\":\n      return produce(state, draft => {\n        draft.cartProducts = new Map();\n        draft.rentOrders = [];\n      });\n\n    case \"removeRentOrder\":\n      return produce(state, draft => {\n        draft.rentOrders = [];\n        state.rentOrders.forEach(order => {\n          if (order.orderId !== action.orderId) {\n            draft.rentOrders.push(order);\n          }\n        });\n      });\n\n    case \"logInUser\":\n      return produce(state, draft => {\n        draft.user = action.user;\n      });\n\n    case \"signUpUser\":\n      return produce(state, draft => {\n        const user = {\n          id: state.usersList.length.toString(),\n          email: action.email,\n          password: action.password,\n          name: action.name,\n          address: action.address,\n          phoneNumber: action.phoneNumber,\n          role: 'user'\n        };\n        draft.user = user;\n        draft.usersList.push(draft.user);\n      });\n\n    case \"addInventory\":\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if (product.id === action.productId) {\n            draft.products[index].quantity++;\n          }\n        });\n      });\n\n    case \"removeInventory\":\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if (product.id === action.productId) {\n            draft.products[index].quantity--;\n          }\n        });\n      });\n\n    case \"rentProduct\":\n      return produce(state, draft => {\n        draft.rentOrders.push(action.rentOrder);\n      });\n\n    case \"removeProduct\":\n      const newProductsArray = [];\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if (product.id !== action.productId) {\n            newProductsArray.push(product);\n          }\n        });\n        draft.products = newProductsArray;\n      });\n\n    case \"editUser\":\n      return produce(state, draft => {\n        draft.usersList = [];\n        let edited = false;\n        state.usersList.forEach(user => {\n          if (!edited && user.id === action.id) {\n            const newUser = {\n              id: action.id,\n              email: action.email,\n              password: user.password,\n              name: action.name,\n              address: action.address,\n              phoneNumber: action.phoneNumber,\n              role: user.role\n            };\n            edited = true;\n            draft.user = newUser;\n            draft.usersList.push(newUser);\n          } else {\n            draft.usersList.push(user);\n          }\n        });\n      });\n\n    case \"addAdmin\":\n      return produce(state, draft => {\n        const admin = {\n          id: state.usersList.length.toString(),\n          email: action.email,\n          password: action.password,\n          name: action.name,\n          address: action.address,\n          phoneNumber: action.phoneNumber,\n          role: 'admin'\n        };\n        draft.usersList.push(admin);\n      });\n\n    case \"registerProduct\":\n      return produce(state, draft => {\n        const product = {\n          id: (state.products.length + 1).toString(),\n          img: action.img,\n          name: action.name,\n          price: action.price,\n          quantity: action.quantity,\n          type: action.category,\n          description: action.description\n        };\n        draft.products.push(product);\n      });\n\n    case \"minusProductInCart\":\n      return produce(state, draft => {\n        if (state.cartProducts.has(action.id)) {\n          const selectedProduct = state.cartProducts.get(action.id);\n\n          if (selectedProduct.quantity === 1) {\n            draft.cartProducts.delete(action.id);\n          } else if (selectedProduct.quantity > 1) {\n            draft.cartProducts.set(action.id, { ...selectedProduct,\n              quantity: selectedProduct.quantity - 1\n            });\n          }\n        }\n      });\n\n    case \"plusProductInCart\":\n      return produce(state, draft => {\n        state.products.forEach(product => {\n          if (state.cartProducts.has(action.id)) {\n            const selectedProduct = state.cartProducts.get(action.id);\n\n            if (product.id === action.id && product.quantity - selectedProduct.quantity > 0) {\n              draft.cartProducts.set(action.id, { ...selectedProduct,\n                quantity: selectedProduct.quantity + 1\n              });\n            }\n          }\n        });\n      });\n\n    case \"logOut\":\n      return produce(state, draft => {\n        draft.user = null;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/src/store/reducer.ts"],"names":["produce","enableMapSet","mockedUsers","products","initialState","loading","user","cartProducts","Map","rentOrders","rentedProducts","usersList","orders","reducer","state","action","type","draft","has","product","id","selectedProduct","get","set","quantity","delete","size","totalPrice","productsOrders","forEach","parseFloat","price","newProductOrder","name","value","idx","push","day","Date","dd","getDate","toString","mm","getMonth","yyyy","getFullYear","parseInt","newOrder","date","total","toFixed","status","length","concat","order","orderId","email","password","address","phoneNumber","role","index","productId","rentOrder","newProductsArray","edited","newUser","admin","img","category","description"],"mappings":"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","sourcesContent":["import produce, { enableMapSet } from 'immer';\nimport { mockedUsers } from '../mock-objects/usersList';\nimport { products } from '../mock-objects/products';\nimport { ApplicationState, ApplicationAction, User, Order, ProductOrder, ProductModel } from './types';\n\nexport const initialState: ApplicationState = {\n  loading: {\n    user: false,\n  },\n  user: null,\n  products: products,\n  cartProducts: new Map(),\n  rentOrders: [],\n  rentedProducts: [],\n  usersList: mockedUsers,\n  orders: [],\n}\n\nconst reducer = (state = initialState, action: ApplicationAction) => {\n  enableMapSet();\n  \n  switch (action.type) {\n    case \"loadUsersRequest\":\n      return produce(state, draft => {\n        draft.loading.user = true;\n      });\n    case \"loadUsersSuccess\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.user = action.user;\n      });\n    case \"loadUsersError\":\n      return produce(state, draft => {\n        draft.loading.user = false;\n      });\n    case \"addProductToChart\":\n      return produce(state, draft => {\n        if(state.cartProducts.has(action.product.id)){\n          const selectedProduct = state.cartProducts.get(action.product.id)!;\n          draft.cartProducts.set(action.product.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n        } else {\n          draft.cartProducts.set(action.product.id, action.product);\n        }\n      });\n    case \"removeProductToChart\":\n      return produce(state, draft => {\n        if(state.cartProducts.has(action.id)){\n          const selectedProduct = state.cartProducts.get(action.id)!;\n          if(selectedProduct.quantity === 1) {\n            draft.cartProducts.delete(action.id);\n          } else {\n            draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n          }\n        }\n      });\n    case \"placeOrder\":\n      return produce(state, draft => {\n        if(state.cartProducts.size !== 0){\n          let totalPrice: number = 0;\n          let productsOrders: ProductOrder[] = [];\n          \n          state.cartProducts.forEach((product) => {\n            totalPrice += parseFloat(product.price) * product.quantity;\n\n            const newProductOrder: ProductOrder = {\n              id: product.id, \n              name: product.name, \n              price: product.price, \n              quantity: product.quantity\n            }\n\n            draft.products.forEach((value, idx) => {\n              if(value.id === product.id){\n                draft.products[idx].quantity -= product.quantity;\n              }\n            })\n\n            productsOrders.push(newProductOrder);\n          });\n          \n          var day = new Date();\n          var dd = day.getDate().toString();\n          var mm = (day.getMonth()+1).toString();\n          var yyyy = (day.getFullYear()).toString();\n          if(parseInt(dd) < 10){\n            dd = '0' + dd;\n          } \n          if(parseInt(mm)<10){\n            mm = '0' + mm;\n          } \n\n          const newOrder: Order = {\n            productsOrders: productsOrders,\n            date: dd + \"/\" + mm + \"/\" + yyyy,\n            total: totalPrice.toFixed(2),\n            status: \"Preparando para envio!\",\n          }\n\n          draft.orders = state.orders;\n          draft.orders.push(newOrder);\n        }\n\n        if(state.rentOrders.length !== 0) {\n          draft.rentedProducts = draft.rentedProducts.concat(draft.rentOrders);\n        }\n      });\n    case \"clearCart\":\n      return produce(state, draft => {\n        draft.cartProducts = new Map();\n        draft.rentOrders = [];\n      });\n    case \"removeRentOrder\":\n      return produce(state, draft => {\n        draft.rentOrders = [];\n        state.rentOrders.forEach((order) => {\n          if(order.orderId !== action.orderId) {\n            draft.rentOrders.push(order);\n          }\n        });\n      });\n    case \"logInUser\":\n      return produce(state, draft => {\n        draft.user = action.user;\n      });\n    case \"signUpUser\":\n      return produce(state, draft => {\n        const user: User = {\n            id: (state.usersList.length).toString(),\n            email: action.email,\n            password: action.password,\n            name: action.name,\n            address: action.address,\n            phoneNumber: action.phoneNumber,\n            role: 'user',\n        }\n        draft.user = user;\n        draft.usersList.push(draft.user); \n      });\n    case \"addInventory\":\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if(product.id === action.productId){\n            draft.products[index].quantity++;\n          }\n        })\n      });\n\n    case \"removeInventory\":\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if(product.id === action.productId){\n            draft.products[index].quantity--;\n          }\n        })\n      });\n    case \"rentProduct\":\n      return produce(state, draft => {\n        draft.rentOrders.push(action.rentOrder);\n      });\n    case \"removeProduct\":\n      const newProductsArray: ProductModel[] = [];\n      return produce(state, draft => {\n        draft.products.forEach((product, index) => {\n          if(product.id !== action.productId){\n            newProductsArray.push(product);\n          }\n        })\n\n        draft.products = newProductsArray;\n      });\n      \n    case \"editUser\":\n      return produce(state, draft => {\n        draft.usersList = [];\n        let edited: boolean = false;\n        state.usersList.forEach((user) => {\n          if(!edited && user.id === action.id){\n            const newUser: User = {\n              id: action.id,\n              email: action.email,\n              password: user.password,\n              name: action.name,\n              address: action.address,\n              phoneNumber: action.phoneNumber,\n              role: user.role,\n            }\n            edited = true;\n            draft.user = newUser;\n            draft.usersList.push(newUser);\n            \n          } else {\n            draft.usersList.push(user);\n          }\n        });\n      });\n    case \"addAdmin\":\n        return produce(state, draft => {\n          const admin: User = {\n              id: (state.usersList.length).toString(),\n              email: action.email,\n              password: action.password,\n              name: action.name,\n              address: action.address,\n              phoneNumber: action.phoneNumber,\n              role: 'admin',\n          }\n          draft.usersList.push(admin); \n        });\n    case \"registerProduct\":\n      return produce(state, draft => {\n        const product: ProductModel = {\n          id: (state.products.length+1).toString(),\n          img: action.img,\n          name: action.name,\n          price: action.price,\n          quantity: action.quantity,\n          type: action.category,\n          description: action.description,\n        }\n        draft.products.push(product);\n      });\n    case \"minusProductInCart\":\n      return produce(state, draft => {\n        if(state.cartProducts.has(action.id)){\n          const selectedProduct = state.cartProducts.get(action.id)!;\n          if(selectedProduct.quantity === 1){\n            draft.cartProducts.delete(action.id);\n          }else if(selectedProduct.quantity > 1){\n            draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n          }\n        }\n      });\n    case \"plusProductInCart\":\n      return produce(state, draft => {\n        state.products.forEach(product => {\n          if(state.cartProducts.has(action.id)){\n            const selectedProduct = state.cartProducts.get(action.id)!;\n            if(product.id === action.id && product.quantity - selectedProduct.quantity > 0){\n              draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n            }\n          }\n        });\n      });\n    case \"logOut\":\n      return produce(state, draft => {\n        draft.user = null;\n      });\n    default:\n      return state;\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}