{"ast":null,"code":"import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { loadAllOrdersError, loadAllOrdersSuccess, loadAllProductsError, loadAllProductsSuccess, loadUsersError, loadUsersSuccess, placePurchaseOrderError, placePurchaseOrderSuccess, signUpUserError, signUpUserSuccess } from './actionCreators';\nimport { ActionTypes } from './actionTypes';\nimport ApiRequester from './apiRequester';\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* fetchUser(action) {\n  try {\n    const user = yield call(ApiRequester.authenticateUser, action.email, action.password);\n    yield put(user.name === undefined ? loadUsersError() : loadUsersSuccess(user));\n  } catch (e) {\n    yield put(loadUsersError());\n  }\n}\n\nfunction* signUpUserSagas(action) {\n  try {\n    const user = yield call(ApiRequester.registerUser, action.name, action.address, action.phoneNumber, action.email, action.password);\n    console.log(user);\n    yield put(signUpUserSuccess());\n  } catch (e) {\n    yield put(signUpUserError());\n  }\n}\n\nfunction* loadAllProductsSagas() {\n  try {\n    const products = yield call(ApiRequester.getAllProducts);\n    yield put(products.length === 0 ? loadAllProductsError() : loadAllProductsSuccess(products));\n  } catch (e) {\n    yield put(loadAllProductsError());\n  }\n}\n\nfunction* placePurchaseOrderSagas(action) {\n  try {\n    const response = yield call(ApiRequester.placePurchaseOrder, action.user, action.order);\n    yield put((response === null || response === void 0 ? void 0 : response.status) === 200 ? placePurchaseOrderSuccess() : placePurchaseOrderError());\n  } catch (e) {\n    yield put(placePurchaseOrderError());\n  }\n}\n\nfunction* placeRentOrdersSagas(action) {\n  try {\n    const response = yield call(ApiRequester.placeRentOrders, action.user, action.rentOrders);\n    yield put((response === null || response === void 0 ? void 0 : response.status) === 200 ? placePurchaseOrderSuccess() : placePurchaseOrderError());\n  } catch (e) {\n    yield put(placePurchaseOrderError());\n  }\n}\n\nfunction* loadAllOrdersSagas(action) {\n  try {\n    console.log(action.user.id);\n    const purchaseOrders = yield call(ApiRequester.getAllPurchaseOrders, action.user);\n    const rentOrders = yield call(ApiRequester.getAllRentOrders, action.user);\n    let rentOrdersDTO = [];\n\n    if ((rentOrders === null || rentOrders === void 0 ? void 0 : rentOrders.status) === 200) {\n      var _rentOrders$data;\n\n      rentOrdersDTO = (_rentOrders$data = rentOrders.data) === null || _rentOrders$data === void 0 ? void 0 : _rentOrders$data.map(rentOrder => ({ ...rentOrder,\n        startDate: new Date(rentOrder.startDate),\n        endDate: new Date(rentOrder.endDate)\n      }));\n    }\n\n    yield put((purchaseOrders === null || purchaseOrders === void 0 ? void 0 : purchaseOrders.status) === 200 && (rentOrders === null || rentOrders === void 0 ? void 0 : rentOrders.status) === 200 ? loadAllOrdersSuccess(purchaseOrders.data, rentOrdersDTO) : loadAllOrdersError());\n  } catch (e) {\n    yield put(loadAllOrdersError());\n  }\n}\n\nfunction* mySaga() {\n  yield all([takeLatest(ActionTypes.LOAD_USER_REQUEST, fetchUser), takeLatest(ActionTypes.LOAD_ALL_PRODUCTS_REQUEST, loadAllProductsSagas), takeLatest(ActionTypes.SING_UP_USER_REQUEST, signUpUserSagas), takeLatest(ActionTypes.PLACE_PURCHASE_ORDER_REQUEST, placePurchaseOrderSagas), takeLatest(ActionTypes.PLACE_RENT_ORDERS_REQUEST, placeRentOrdersSagas), takeLatest(ActionTypes.LOAD_ALL_ORDERS_REQUEST, loadAllOrdersSagas)]);\n}\n\nexport default mySaga;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/src/store/sagas.ts"],"names":["all","call","put","takeLatest","loadAllOrdersError","loadAllOrdersSuccess","loadAllProductsError","loadAllProductsSuccess","loadUsersError","loadUsersSuccess","placePurchaseOrderError","placePurchaseOrderSuccess","signUpUserError","signUpUserSuccess","ActionTypes","ApiRequester","fetchUser","action","user","authenticateUser","email","password","name","undefined","e","signUpUserSagas","registerUser","address","phoneNumber","console","log","loadAllProductsSagas","products","getAllProducts","length","placePurchaseOrderSagas","response","placePurchaseOrder","order","status","placeRentOrdersSagas","placeRentOrders","rentOrders","loadAllOrdersSagas","id","purchaseOrders","getAllPurchaseOrders","getAllRentOrders","rentOrdersDTO","data","map","rentOrder","startDate","Date","endDate","mySaga","LOAD_USER_REQUEST","LOAD_ALL_PRODUCTS_REQUEST","SING_UP_USER_REQUEST","PLACE_PURCHASE_ORDER_REQUEST","PLACE_RENT_ORDERS_REQUEST","LOAD_ALL_ORDERS_REQUEST"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,SAASC,kBAAT,EAA6BC,oBAA7B,EAAmDC,oBAAnD,EAAyEC,sBAAzE,EAAiGC,cAAjG,EAAiHC,gBAAjH,EAAmIC,uBAAnI,EAA4JC,yBAA5J,EAAuLC,eAAvL,EAAwMC,iBAAxM,QAAiO,kBAAjO;AAEA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAGA;AAEA,UAAUC,SAAV,CAAoBC,MAApB,EAAoD;AAClD,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMjB,IAAI,CAACc,YAAY,CAACI,gBAAd,EAAgCF,MAAM,CAACG,KAAvC,EAA8CH,MAAM,CAACI,QAArD,CAAvB;AACA,UAAMnB,GAAG,CAACgB,IAAI,CAACI,IAAL,KAAcC,SAAd,GAA0Bf,cAAc,EAAxC,GAA6CC,gBAAgB,CAACS,IAAD,CAA9D,CAAT;AACD,GAHD,CAGE,OAAOM,CAAP,EAAU;AACV,UAAMtB,GAAG,CAACM,cAAc,EAAf,CAAT;AACD;AACF;;AAED,UAAUiB,eAAV,CAA0BR,MAA1B,EAA2D;AACzD,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMjB,IAAI,CAACc,YAAY,CAACW,YAAd,EAA4BT,MAAM,CAACK,IAAnC,EAAyCL,MAAM,CAACU,OAAhD,EAAyDV,MAAM,CAACW,WAAhE,EAA6EX,MAAM,CAACG,KAApF,EAA2FH,MAAM,CAACI,QAAlG,CAAvB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AACA,UAAMhB,GAAG,CAACW,iBAAiB,EAAlB,CAAT;AACD,GAJD,CAIE,OAAOW,CAAP,EAAU;AACV,UAAMtB,GAAG,CAACU,eAAe,EAAhB,CAAT;AACD;AACF;;AAED,UAAUmB,oBAAV,GAAuC;AACrC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAM/B,IAAI,CAACc,YAAY,CAACkB,cAAd,CAA3B;AACA,UAAM/B,GAAG,CAAC8B,QAAQ,CAACE,MAAT,KAAoB,CAApB,GAAwB5B,oBAAoB,EAA5C,GAAiDC,sBAAsB,CAACyB,QAAD,CAAxE,CAAT;AACD,GAHD,CAGE,OAAOR,CAAP,EAAU;AACV,UAAMtB,GAAG,CAACI,oBAAoB,EAArB,CAAT;AACD;AACF;;AAED,UAAU6B,uBAAV,CAAkClB,MAAlC,EAA2E;AACzE,MAAI;AACF,UAAMmB,QAAQ,GAAG,MAAMnC,IAAI,CAACc,YAAY,CAACsB,kBAAd,EAAkCpB,MAAM,CAACC,IAAzC,EAA+CD,MAAM,CAACqB,KAAtD,CAA3B;AACA,UAAMpC,GAAG,CAAC,CAAAkC,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEG,MAAV,MAAoB,GAApB,GAAyB5B,yBAAyB,EAAlD,GAAuDD,uBAAuB,EAA/E,CAAT;AACD,GAHD,CAGE,OAAOc,CAAP,EAAU;AACV,UAAMtB,GAAG,CAACQ,uBAAuB,EAAxB,CAAT;AACD;AACF;;AAED,UAAU8B,oBAAV,CAA+BvB,MAA/B,EAAqE;AACnE,MAAI;AACF,UAAMmB,QAAQ,GAAG,MAAMnC,IAAI,CAACc,YAAY,CAAC0B,eAAd,EAA+BxB,MAAM,CAACC,IAAtC,EAA4CD,MAAM,CAACyB,UAAnD,CAA3B;AACA,UAAMxC,GAAG,CAAC,CAAAkC,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEG,MAAV,MAAoB,GAApB,GAAyB5B,yBAAyB,EAAlD,GAAuDD,uBAAuB,EAA/E,CAAT;AACD,GAHD,CAGE,OAAOc,CAAP,EAAU;AACV,UAAMtB,GAAG,CAACQ,uBAAuB,EAAxB,CAAT;AACD;AACF;;AAED,UAAUiC,kBAAV,CAA6B1B,MAA7B,EAAiE;AAC/D,MAAI;AACFY,IAAAA,OAAO,CAACC,GAAR,CAAYb,MAAM,CAACC,IAAP,CAAY0B,EAAxB;AACA,UAAMC,cAAc,GAAG,MAAM5C,IAAI,CAACc,YAAY,CAAC+B,oBAAd,EAAoC7B,MAAM,CAACC,IAA3C,CAAjC;AACA,UAAMwB,UAAU,GAAG,MAAMzC,IAAI,CAACc,YAAY,CAACgC,gBAAd,EAAgC9B,MAAM,CAACC,IAAvC,CAA7B;AAEA,QAAI8B,aAA0B,GAAG,EAAjC;;AAEA,QAAG,CAAAN,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEH,MAAZ,MAAuB,GAA1B,EAA8B;AAAA;;AAC5BS,MAAAA,aAAa,uBAAGN,UAAU,CAACO,IAAd,qDAAG,iBAAiBC,GAAjB,CAAsBC,SAAD,KAAgC,EACnE,GAAGA,SADgE;AACrDC,QAAAA,SAAS,EAAE,IAAIC,IAAJ,CAASF,SAAS,CAACC,SAAnB,CAD0C;AACXE,QAAAA,OAAO,EAAE,IAAID,IAAJ,CAASF,SAAS,CAACG,OAAnB;AADE,OAAhC,CAArB,CAAhB;AAGD;;AAED,UAAMpD,GAAG,CACP,CAAA2C,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAEN,MAAhB,MAA2B,GAA3B,IAAkC,CAAAG,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEH,MAAZ,MAAsB,GAAxD,GACElC,oBAAoB,CAACwC,cAAc,CAACI,IAAhB,EAAsBD,aAAtB,CADtB,GAC6D5C,kBAAkB,EAFxE,CAAT;AAID,GAjBD,CAiBE,OAAOoB,CAAP,EAAU;AACV,UAAMtB,GAAG,CAACE,kBAAkB,EAAnB,CAAT;AACD;AACF;;AAED,UAAUmD,MAAV,GAAmB;AACjB,QAAMvD,GAAG,CAAC,CACRG,UAAU,CAACW,WAAW,CAAC0C,iBAAb,EAAgCxC,SAAhC,CADF,EAERb,UAAU,CAACW,WAAW,CAAC2C,yBAAb,EAAwC1B,oBAAxC,CAFF,EAGR5B,UAAU,CAACW,WAAW,CAAC4C,oBAAb,EAAmCjC,eAAnC,CAHF,EAIRtB,UAAU,CAACW,WAAW,CAAC6C,4BAAb,EAA2CxB,uBAA3C,CAJF,EAKRhC,UAAU,CAACW,WAAW,CAAC8C,yBAAb,EAAwCpB,oBAAxC,CALF,EAMRrC,UAAU,CAACW,WAAW,CAAC+C,uBAAb,EAAsClB,kBAAtC,CANF,CAAD,CAAT;AAQD;;AAED,eAAeY,MAAf","sourcesContent":["import { all, call, put, takeLatest } from 'redux-saga/effects'\nimport { loadAllOrdersError, loadAllOrdersSuccess, loadAllProductsError, loadAllProductsSuccess, loadUsersError, loadUsersSuccess, placePurchaseOrderError, placePurchaseOrderSuccess, signUpUserError, signUpUserSuccess } from './actionCreators';\nimport { LoadAllOrdersRequest, LoadAllProductsRequest, LoadUsersRequest, PlacePurchaseOrderRequest, PlaceRentOrdersRequest, SignUpUserRequest } from './actions';\nimport { ActionTypes } from './actionTypes';\nimport ApiRequester from './apiRequester'\nimport { RentOrder } from './types';\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* fetchUser(action: LoadUsersRequest) : any {\n  try {\n    const user = yield call(ApiRequester.authenticateUser, action.email, action.password);\n    yield put(user.name === undefined ? loadUsersError() : loadUsersSuccess(user));\n  } catch (e) {\n    yield put(loadUsersError());\n  }\n}\n\nfunction* signUpUserSagas(action: SignUpUserRequest) : any {\n  try {\n    const user = yield call(ApiRequester.registerUser, action.name, action.address, action.phoneNumber, action.email, action.password);\n    console.log(user);\n    yield put(signUpUserSuccess());\n  } catch (e) {\n    yield put(signUpUserError());\n  }\n}\n\nfunction* loadAllProductsSagas() : any {\n  try {\n    const products = yield call(ApiRequester.getAllProducts);\n    yield put(products.length === 0 ? loadAllProductsError() : loadAllProductsSuccess(products));\n  } catch (e) {\n    yield put(loadAllProductsError());\n  }\n}\n\nfunction* placePurchaseOrderSagas(action: PlacePurchaseOrderRequest) : any {\n  try {\n    const response = yield call(ApiRequester.placePurchaseOrder, action.user, action.order);\n    yield put(response?.status=== 200? placePurchaseOrderSuccess() : placePurchaseOrderError());\n  } catch (e) {\n    yield put(placePurchaseOrderError());\n  }\n}\n\nfunction* placeRentOrdersSagas(action: PlaceRentOrdersRequest) : any {\n  try {\n    const response = yield call(ApiRequester.placeRentOrders, action.user, action.rentOrders);\n    yield put(response?.status=== 200? placePurchaseOrderSuccess() : placePurchaseOrderError());\n  } catch (e) {\n    yield put(placePurchaseOrderError());\n  }\n}\n\nfunction* loadAllOrdersSagas(action: LoadAllOrdersRequest) : any {\n  try {\n    console.log(action.user.id);\n    const purchaseOrders = yield call(ApiRequester.getAllPurchaseOrders, action.user);\n    const rentOrders = yield call(ApiRequester.getAllRentOrders, action.user);\n\n    let rentOrdersDTO: RentOrder[] = [];\n\n    if(rentOrders?.status === 200){ \n      rentOrdersDTO = rentOrders.data?.map((rentOrder: any) => <RentOrder> {\n        ...rentOrder, startDate: new Date(rentOrder.startDate), endDate: new Date(rentOrder.endDate)\n      });\n    }\n\n    yield put(\n      purchaseOrders?.status === 200 && rentOrders?.status=== 200? \n        loadAllOrdersSuccess(purchaseOrders.data, rentOrdersDTO) : loadAllOrdersError()\n    );\n  } catch (e) {\n    yield put(loadAllOrdersError());\n  }\n}\n\nfunction* mySaga() {\n  yield all([\n    takeLatest(ActionTypes.LOAD_USER_REQUEST, fetchUser),\n    takeLatest(ActionTypes.LOAD_ALL_PRODUCTS_REQUEST, loadAllProductsSagas),\n    takeLatest(ActionTypes.SING_UP_USER_REQUEST, signUpUserSagas),\n    takeLatest(ActionTypes.PLACE_PURCHASE_ORDER_REQUEST, placePurchaseOrderSagas),\n    takeLatest(ActionTypes.PLACE_RENT_ORDERS_REQUEST, placeRentOrdersSagas),\n    takeLatest(ActionTypes.LOAD_ALL_ORDERS_REQUEST, loadAllOrdersSagas)\n  ]);\n}\n\nexport default mySaga;"]},"metadata":{},"sourceType":"module"}