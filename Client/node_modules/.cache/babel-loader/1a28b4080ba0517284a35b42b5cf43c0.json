{"ast":null,"code":"import produce, { enableMapSet } from 'immer';\nimport { mockedUsers } from '../mock-objects/usersList';\nimport { ActionTypes } from './actionTypes';\nexport const initialState = {\n  loading: {\n    user: false,\n    allProducts: false,\n    signUp: false\n  },\n  error: {\n    user: false,\n    allProducts: false,\n    signUp: false\n  },\n  success: {\n    signUp: false\n  },\n  user: null,\n  products: [],\n  cartProducts: new Map(),\n  rentOrders: [],\n  rentedProducts: [],\n  usersList: mockedUsers,\n  orders: []\n};\n\nconst reducer = (state = initialState, action) => {\n  enableMapSet();\n\n  switch (action.type) {\n    case ActionTypes.LOAD_USER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.user = true;\n        draft.error.user = false;\n      });\n\n    case ActionTypes.LOAD_USER_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = false;\n        draft.user = action.user;\n      });\n\n    case ActionTypes.LOAD_USER_ERROR:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = true;\n      });\n\n    case ActionTypes.LOAD_ALL_PRODUCTS_REQUEST:\n      return produce(state, draft => {\n        draft.loading.allProducts = true;\n        draft.error.allProducts = false;\n      });\n\n    case ActionTypes.LOAD_ALL_PRODUCTS_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.allProducts = false;\n        draft.error.allProducts = false;\n        draft.products = action.products;\n      });\n\n    case ActionTypes.LOAD_ALL_PRODUCTS_ERROR:\n      return produce(state, draft => {\n        draft.loading.allProducts = false;\n        draft.error.allProducts = true;\n      });\n    // case \"addProductToChart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.product.id)){\n    //       const selectedProduct = state.cartProducts.get(action.product.id)!;\n    //       draft.cartProducts.set(action.product.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n    //     } else {\n    //       draft.cartProducts.set(action.product.id, action.product);\n    //     }\n    //   });\n    // case \"removeProductToChart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1) {\n    //         draft.cartProducts.delete(action.id);\n    //       } else {\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n\n    case ActionTypes.PLACE_PURCHASE_ORDER_REQUEST:\n      return produce(state, draft => {\n        if (state.cartProducts.size !== 0) {\n          let totalPrice = 0;\n          let productsOrders = [];\n          state.cartProducts.forEach(product => {\n            totalPrice += parseFloat(product.price) * product.quantity;\n            const newProductOrder = {\n              id: product.id,\n              name: product.name,\n              price: product.price,\n              quantity: product.quantity\n            };\n            draft.products.forEach((value, idx) => {\n              if (value.id === product.id) {\n                draft.products[idx].quantity -= product.quantity;\n              }\n            });\n            productsOrders.push(newProductOrder);\n          });\n          var day = new Date();\n          var dd = day.getDate().toString();\n          var mm = (day.getMonth() + 1).toString();\n          var yyyy = day.getFullYear().toString();\n\n          if (parseInt(dd) < 10) {\n            dd = '0' + dd;\n          }\n\n          if (parseInt(mm) < 10) {\n            mm = '0' + mm;\n          }\n\n          const newOrder = {\n            productsOrders: productsOrders,\n            date: dd + \"/\" + mm + \"/\" + yyyy,\n            total: totalPrice.toFixed(2),\n            status: \"Preparando para envio!\"\n          };\n          draft.orders = state.orders;\n          draft.orders.push(newOrder);\n        }\n\n        if (state.rentOrders.length !== 0) {\n          draft.rentedProducts = draft.rentedProducts.concat(draft.rentOrders);\n        }\n      });\n    // case \"clearCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.cartProducts = new Map();\n    //     draft.rentOrders = [];\n    //   });\n    // case \"removeRentOrder\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.rentOrders = [];\n    //     state.rentOrders.forEach((order) => {\n    //       if(order.orderId !== action.orderId) {\n    //         draft.rentOrders.push(order);\n    //       }\n    //     });\n    //   });\n    // case \"logInUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.user = action.user;\n    //   });\n\n    case ActionTypes.SING_UP_USER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.signUp = true;\n        draft.error.signUp = false;\n        draft.success.signUp = false;\n      });\n\n    case ActionTypes.SING_UP_USER_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.signUp = false;\n        draft.error.signUp = false;\n        draft.success.signUp = true;\n      });\n\n    case ActionTypes.SING_UP_USER_ERROR:\n      return produce(state, draft => {\n        draft.loading.signUp = false;\n        draft.error.signUp = true;\n        draft.success.signUp = false;\n      });\n    // case \"addInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity++;\n    //       }\n    //     })\n    //   });\n    // case \"removeInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity--;\n    //       }\n    //     })\n    //   });\n    // case \"rentProduct\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.rentOrders.push(action.rentOrder);\n    //   });\n    // case \"removeProduct\":\n    // case ActionTypes.:\n    //   const newProductsArray: ProductModel[] = [];\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id !== action.productId){\n    //         newProductsArray.push(product);\n    //       }\n    //     })\n    //     draft.products = newProductsArray;\n    //   });\n    // case \"editUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.usersList = [];\n    //     let edited: boolean = false;\n    //     state.usersList.forEach((user) => {\n    //       if(!edited && user.id === action.id){\n    //         const newUser: User = {\n    //           id: action.id,\n    //           email: action.email,\n    //           password: user.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: user.role,\n    //         }\n    //         edited = true;\n    //         draft.user = newUser;\n    //         draft.usersList.push(newUser);\n    //       } else {\n    //         draft.usersList.push(user);\n    //       }\n    //     });\n    //   });\n    // case \"addAdmin\":\n    // case ActionTypes.:\n    //     return produce(state, draft => {\n    //       const admin: User = {\n    //           id: (state.usersList.length).toString(),\n    //           email: action.email,\n    //           password: action.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: 'admin',\n    //       }\n    //       draft.usersList.push(admin); \n    //     });\n    // case \"registerProduct\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     const product: ProductModel = {\n    //       id: (state.products.length+1).toString(),\n    //       img: action.img,\n    //       name: action.name,\n    //       price: action.price,\n    //       quantity: action.quantity,\n    //       type: action.category,\n    //       description: action.description,\n    //     }\n    //     draft.products.push(product);\n    //   });\n    // case \"minusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1){\n    //         draft.cartProducts.delete(action.id);\n    //       }else if(selectedProduct.quantity > 1){\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n    // case \"plusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     state.products.forEach(product => {\n    //       if(state.cartProducts.has(action.id)){\n    //         const selectedProduct = state.cartProducts.get(action.id)!;\n    //         if(product.id === action.id && product.quantity - selectedProduct.quantity > 0){\n    //           draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n    //         }\n    //       }\n    //     });\n    //   });\n    // case ActionTypes.LOG_OUT_REQUEST:\n    //   return produce(state, draft => {\n    //     draft.loading = true;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_SUCCESS:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_ERROR:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.error = true;\n    //     draft.user = null;\n    //   });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/src/store/reducer.ts"],"names":["produce","enableMapSet","mockedUsers","ActionTypes","initialState","loading","user","allProducts","signUp","error","success","products","cartProducts","Map","rentOrders","rentedProducts","usersList","orders","reducer","state","action","type","LOAD_USER_REQUEST","draft","LOAD_USER_SUCCESS","LOAD_USER_ERROR","LOAD_ALL_PRODUCTS_REQUEST","LOAD_ALL_PRODUCTS_SUCCESS","LOAD_ALL_PRODUCTS_ERROR","PLACE_PURCHASE_ORDER_REQUEST","size","totalPrice","productsOrders","forEach","product","parseFloat","price","quantity","newProductOrder","id","name","value","idx","push","day","Date","dd","getDate","toString","mm","getMonth","yyyy","getFullYear","parseInt","newOrder","date","total","toFixed","status","length","concat","SING_UP_USER_REQUEST","SING_UP_USER_SUCCESS","SING_UP_USER_ERROR"],"mappings":"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","sourcesContent":["import produce, { enableMapSet } from 'immer';\nimport { mockedUsers } from '../mock-objects/usersList';\nimport { products } from '../mock-objects/products';\nimport { ApplicationState, User, Order, ProductOrder, ProductModel } from './types';\nimport { ApplicationAction } from './actions';\nimport { ActionTypes } from './actionTypes';\n\nexport const initialState: ApplicationState = {\n  loading: {\n    user: false,\n    allProducts: false,\n    signUp: false,\n  },\n  error: {\n    user: false,\n    allProducts: false,\n    signUp: false,\n  },\n  success: {\n    signUp: false,\n  },\n  user: null,\n  products: [],\n  cartProducts: new Map(),\n  rentOrders: [],\n  rentedProducts: [],\n  usersList: mockedUsers,\n  orders: [],\n}\n\nconst reducer = (state = initialState, action: ApplicationAction) => {\n  enableMapSet();\n  \n  switch (action.type) {\n    case ActionTypes.LOAD_USER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.user = true;\n        draft.error.user = false;\n      });\n      case ActionTypes.LOAD_USER_SUCCESS:\n        return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = false;\n        draft.user = action.user;\n      });\n    case ActionTypes.LOAD_USER_ERROR:\n      return produce(state, draft => {\n        draft.loading.user = false;\n        draft.error.user = true;\n      });\n    case ActionTypes.LOAD_ALL_PRODUCTS_REQUEST:\n      return produce(state, draft => {\n        draft.loading.allProducts = true;\n        draft.error.allProducts = false;\n      });\n      case ActionTypes.LOAD_ALL_PRODUCTS_SUCCESS:\n        return produce(state, draft => {\n        draft.loading.allProducts = false;\n        draft.error.allProducts = false;\n        draft.products = action.products;\n      });\n    case ActionTypes.LOAD_ALL_PRODUCTS_ERROR:\n      return produce(state, draft => {\n        draft.loading.allProducts = false;\n        draft.error.allProducts = true;\n      });\n    // case \"addProductToChart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.product.id)){\n    //       const selectedProduct = state.cartProducts.get(action.product.id)!;\n    //       draft.cartProducts.set(action.product.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n    //     } else {\n    //       draft.cartProducts.set(action.product.id, action.product);\n    //     }\n    //   });\n    // case \"removeProductToChart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1) {\n    //         draft.cartProducts.delete(action.id);\n    //       } else {\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n    case ActionTypes.PLACE_PURCHASE_ORDER_REQUEST:\n      return produce(state, draft => {\n        if(state.cartProducts.size !== 0){\n          let totalPrice: number = 0;\n          let productsOrders: ProductOrder[] = [];\n          \n          state.cartProducts.forEach((product) => {\n            totalPrice += parseFloat(product.price) * product.quantity;\n\n            const newProductOrder: ProductOrder = {\n              id: product.id, \n              name: product.name, \n              price: product.price, \n              quantity: product.quantity\n            }\n\n            draft.products.forEach((value, idx) => {\n              if(value.id === product.id){\n                draft.products[idx].quantity -= product.quantity;\n              }\n            })\n\n            productsOrders.push(newProductOrder);\n          });\n          \n          var day = new Date();\n          var dd = day.getDate().toString();\n          var mm = (day.getMonth()+1).toString();\n          var yyyy = (day.getFullYear()).toString();\n          if(parseInt(dd) < 10){\n            dd = '0' + dd;\n          } \n          if(parseInt(mm)<10){\n            mm = '0' + mm;\n          } \n\n          const newOrder: Order = {\n            productsOrders: productsOrders,\n            date: dd + \"/\" + mm + \"/\" + yyyy,\n            total: totalPrice.toFixed(2),\n            status: \"Preparando para envio!\",\n          }\n\n          draft.orders = state.orders;\n          draft.orders.push(newOrder);\n        }\n\n        if(state.rentOrders.length !== 0) {\n          draft.rentedProducts = draft.rentedProducts.concat(draft.rentOrders);\n        }\n      });\n    // case \"clearCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.cartProducts = new Map();\n    //     draft.rentOrders = [];\n    //   });\n    // case \"removeRentOrder\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.rentOrders = [];\n    //     state.rentOrders.forEach((order) => {\n    //       if(order.orderId !== action.orderId) {\n    //         draft.rentOrders.push(order);\n    //       }\n    //     });\n    //   });\n    // case \"logInUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.user = action.user;\n    //   });\n    case ActionTypes.SING_UP_USER_REQUEST:\n      return produce(state, draft => {\n        draft.loading.signUp = true;\n        draft.error.signUp = false;\n        draft.success.signUp = false;\n      });\n    case ActionTypes.SING_UP_USER_SUCCESS:\n      return produce(state, draft => {\n        draft.loading.signUp = false;\n        draft.error.signUp = false;\n        draft.success.signUp = true; \n      });\n    case ActionTypes.SING_UP_USER_ERROR:\n      return produce(state, draft => {\n        draft.loading.signUp = false;\n        draft.error.signUp = true;\n        draft.success.signUp = false;\n      });\n    // case \"addInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity++;\n    //       }\n    //     })\n    //   });\n\n    // case \"removeInventory\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id === action.productId){\n    //         draft.products[index].quantity--;\n    //       }\n    //     })\n    //   });\n    // case \"rentProduct\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.rentOrders.push(action.rentOrder);\n    //   });\n    // case \"removeProduct\":\n    // case ActionTypes.:\n    //   const newProductsArray: ProductModel[] = [];\n    //   return produce(state, draft => {\n    //     draft.products.forEach((product, index) => {\n    //       if(product.id !== action.productId){\n    //         newProductsArray.push(product);\n    //       }\n    //     })\n\n    //     draft.products = newProductsArray;\n    //   });\n      \n    // case \"editUser\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     draft.usersList = [];\n    //     let edited: boolean = false;\n    //     state.usersList.forEach((user) => {\n    //       if(!edited && user.id === action.id){\n    //         const newUser: User = {\n    //           id: action.id,\n    //           email: action.email,\n    //           password: user.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: user.role,\n    //         }\n    //         edited = true;\n    //         draft.user = newUser;\n    //         draft.usersList.push(newUser);\n            \n    //       } else {\n    //         draft.usersList.push(user);\n    //       }\n    //     });\n    //   });\n    // case \"addAdmin\":\n    // case ActionTypes.:\n    //     return produce(state, draft => {\n    //       const admin: User = {\n    //           id: (state.usersList.length).toString(),\n    //           email: action.email,\n    //           password: action.password,\n    //           name: action.name,\n    //           address: action.address,\n    //           phoneNumber: action.phoneNumber,\n    //           role: 'admin',\n    //       }\n    //       draft.usersList.push(admin); \n    //     });\n    // case \"registerProduct\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     const product: ProductModel = {\n    //       id: (state.products.length+1).toString(),\n    //       img: action.img,\n    //       name: action.name,\n    //       price: action.price,\n    //       quantity: action.quantity,\n    //       type: action.category,\n    //       description: action.description,\n    //     }\n    //     draft.products.push(product);\n    //   });\n    // case \"minusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     if(state.cartProducts.has(action.id)){\n    //       const selectedProduct = state.cartProducts.get(action.id)!;\n    //       if(selectedProduct.quantity === 1){\n    //         draft.cartProducts.delete(action.id);\n    //       }else if(selectedProduct.quantity > 1){\n    //         draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity - 1})\n    //       }\n    //     }\n    //   });\n    // case \"plusProductInCart\":\n    // case ActionTypes.:\n    //   return produce(state, draft => {\n    //     state.products.forEach(product => {\n    //       if(state.cartProducts.has(action.id)){\n    //         const selectedProduct = state.cartProducts.get(action.id)!;\n    //         if(product.id === action.id && product.quantity - selectedProduct.quantity > 0){\n    //           draft.cartProducts.set(action.id, {...selectedProduct, quantity: selectedProduct.quantity + 1})\n    //         }\n    //       }\n    //     });\n    //   });\n    // case ActionTypes.LOG_OUT_REQUEST:\n    //   return produce(state, draft => {\n    //     draft.loading = true;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_SUCCESS:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.user = null;\n    //   });\n    // case ActionTypes.LOG_OUT_ERROR:\n    //   return produce(state, draft => {\n    //     draft.loading = false;\n    //     draft.error = true;\n    //     draft.user = null;\n    //   });\n    default:\n      return state;\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}