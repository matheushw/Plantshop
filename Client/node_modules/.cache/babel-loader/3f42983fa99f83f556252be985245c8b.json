{"ast":null,"code":"import axios from \"axios\";\nconst endPoint = \"http://localhost:3001\";\n\nclass ApiRequester {}\n\nApiRequester.authenticateUser = async (email, password) => {\n  try {\n    const response = await axios(endPoint + \"/user\", {\n      method: 'get',\n      params: {\n        email: email,\n        password: password\n      }\n    });\n    const user = {\n      address: response.data['address'],\n      email: response.data['email'],\n      id: response.data['_id'],\n      name: response.data['name'],\n      password: response.data['password'],\n      phoneNumber: response.data['phoneNumber'],\n      admin: response.data['admin']\n    };\n    return user;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiRequester.registerUser = async (name, address, phoneNumber, email, password) => {\n  try {\n    const response = await axios(endPoint + \"/user\", {\n      method: 'post',\n      params: {\n        name: name,\n        address: address,\n        phoneNumber: phoneNumber,\n        email: email,\n        password: password,\n        admin: false\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiRequester.editUser = async (name, address, phoneNumber, email, id) => {\n  try {\n    const response = await axios(endPoint + \"/user\", {\n      method: 'put',\n      params: {\n        name: name,\n        address: address,\n        phoneNumber: phoneNumber,\n        email: email,\n        _id: id\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiRequester.addAdmin = async (name, address, phoneNumber, email, password) => {\n  try {\n    const response = await axios(endPoint + \"/user\", {\n      method: 'post',\n      params: {\n        name: name,\n        address: address,\n        phoneNumber: phoneNumber,\n        email: email,\n        password: password,\n        admin: true\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiRequester.addProduct = async (name, category, quantity, img, price, description) => {\n  try {\n    const response = await axios(endPoint + \"/product\", {\n      method: 'post',\n      params: {\n        name: name,\n        type: category,\n        quantity: quantity,\n        img: img,\n        price: price,\n        description: description\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiRequester.removeProduct = async productId => {\n  try {\n    const response = await axios(endPoint + \"/product\", {\n      method: 'delete',\n      params: {\n        _id: productId\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiRequester.addInventory = async productId => {\n  try {\n    const response = await axios(endPoint + \"/product/plus\", {\n      method: 'put',\n      params: {\n        _id: productId\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiRequester.removeInventory = async productId => {\n  try {\n    const response = await axios(endPoint + \"/product/minus\", {\n      method: 'put',\n      params: {\n        _id: productId\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiRequester.getAllProducts = async () => {\n  try {\n    const response = await axios.get(endPoint + \"/product\");\n    const products = response.data.map(product => {\n      return {\n        description: product['description'],\n        id: product['_id'],\n        img: product['img'],\n        name: product['name'],\n        price: product['price'],\n        quantity: product['quantity'],\n        type: product['type']\n      };\n    });\n    return products;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiRequester.getAllPurchaseOrders = async user => {\n  try {\n    const response = await axios(endPoint + \"/purchaseOrderGroup\", {\n      method: 'get',\n      params: {\n        userId: user.id\n      }\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiRequester.getAllRentOrders = async user => {\n  try {\n    const response = await axios(endPoint + \"/rentOrders\", {\n      method: 'get',\n      params: {\n        userId: user.id\n      }\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiRequester.placePurchaseOrder = async (user, order) => {\n  try {\n    const orderDTO = { ...order,\n      userId: user.id\n    };\n    const response = await axios(endPoint + \"/purchaseOrderGroup\", {\n      method: 'post',\n      data: orderDTO,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nApiRequester.placeRentOrders = async (user, orders) => {\n  try {\n    const orderDTO = orders.map(order => {\n      var _order$startDate, _order$endDate;\n\n      return { ...order,\n        startDate: (_order$startDate = order.startDate) === null || _order$startDate === void 0 ? void 0 : _order$startDate.getTime(),\n        endDate: (_order$endDate = order.endDate) === null || _order$endDate === void 0 ? void 0 : _order$endDate.getTime(),\n        userId: user.id\n      };\n    });\n    const response = await axios(endPoint + \"/rentOrders\", {\n      method: 'post',\n      data: orderDTO,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default ApiRequester;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/src/store/apiRequester.ts"],"names":["axios","endPoint","ApiRequester","authenticateUser","email","password","response","method","params","user","address","data","id","name","phoneNumber","admin","error","registerUser","headers","editUser","_id","addAdmin","addProduct","category","quantity","img","price","description","type","removeProduct","productId","addInventory","removeInventory","getAllProducts","get","products","map","product","getAllPurchaseOrders","userId","getAllRentOrders","placePurchaseOrder","order","orderDTO","placeRentOrders","orders","startDate","getTime","endDate"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { Order, ProductModel, RentOrder, User } from \"./types\";\n\nconst endPoint = \"http://localhost:3001\";\n\nclass ApiRequester {\n\n  public static authenticateUser = async (email: string, password: string) => {\n    try{\n      const response = await axios(endPoint + \"/user\", {\n        method: 'get',\n        params: {\n          email: email,\n          password: password\n        }\n      });\n      const user: User = {\n        address: response.data['address'],\n        email: response.data['email'],\n        id: response.data['_id'],\n        name: response.data['name'],\n        password: response.data['password'],\n        phoneNumber: response.data['phoneNumber'],\n        admin: response.data['admin'],\n      }\n\n      return user;\n    } catch(error) {\n      throw error;\n    }\n  }\n\n  public static registerUser = async (\n    name: string,\n    address: string,\n    phoneNumber: string,\n    email: string,\n    password: string) => {\n    try{\n      const response = await axios(endPoint + \"/user\", {\n        method: 'post',\n        params: {\n          name: name,\n          address: address,\n          phoneNumber: phoneNumber,\n          email: email,\n          password: password,\n          admin: false\n        },\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public static editUser = async (\n    name: string,\n    address: string,\n    phoneNumber: string,\n    email: string,\n    id: string) => {\n    try{\n      const response = await axios(endPoint + \"/user\", {\n        method: 'put',\n        params: {\n          name: name,\n          address: address,\n          phoneNumber: phoneNumber,\n          email: email,\n          _id: id\n        },\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public static addAdmin = async (\n    name: string,\n    address: string,\n    phoneNumber: string,\n    email: string,\n    password: string) => {\n    try{\n      const response = await axios(endPoint + \"/user\", {\n        method: 'post',\n        params: {\n          name: name,\n          address: address,\n          phoneNumber: phoneNumber,\n          email: email,\n          password: password,\n          admin: true\n        },\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public static addProduct = async (\n    name: string,\n    category: string,\n    quantity: number,\n    img: string,\n    price: string,\n    description: string) => {\n    try{\n      const response = await axios(endPoint + \"/product\", {\n        method: 'post',\n        params: {\n          name: name,\n          type: category,\n          quantity: quantity,\n          img: img,\n          price: price,\n          description: description\n        },\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public static removeProduct = async ( productId: string ) => {\n    try{\n      const response = await axios(endPoint + \"/product\", {\n        method: 'delete',\n        params: {\n          _id: productId\n        },\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public static addInventory = async (productId: string) => {\n    try {\n      const response = await axios(endPoint + \"/product/plus\", {\n        method: 'put',\n        params: {\n          _id : productId\n        },\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public static removeInventory = async (productId: string) => {\n    try {\n      const response = await axios(endPoint + \"/product/minus\", {\n        method: 'put',\n        params: {\n          _id : productId\n        },\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  public static getAllProducts = async () => {\n    try{\n      const response = await axios.get(endPoint + \"/product\");\n\n      const products: ProductModel[] = response.data.map((product: any) : ProductModel  => {\n        return {\n          description: product['description'],\n          id: product['_id'],\n          img: product['img'],\n          name: product['name'],\n          price: product['price'],\n          quantity: product['quantity'],\n          type: product['type']\n        }\n      });\n\n      return products;\n    } catch(error) {\n      throw error;\n    }\n  }\n  \n  public static getAllPurchaseOrders = async (user: User) => {\n    try{\n      const response = await axios(endPoint + \"/purchaseOrderGroup\", {\n        method: 'get',\n        params: {\n          userId: user.id\n        }\n      });\n      return response;\n    } catch(error) {\n      throw error;\n    }\n  }\n  \n  public static getAllRentOrders = async (user: User) => {\n    try{\n      const response = await axios(endPoint + \"/rentOrders\", {\n        method: 'get',\n        params: {\n          userId: user.id\n        }\n      });\n      return response;\n    } catch(error) {\n      throw error;\n    }\n  }\n\n  public static placePurchaseOrder = async (user: User, order: Order) => {\n    try{\n      const orderDTO = {...order, userId: user.id};\n      const response = await axios(endPoint + \"/purchaseOrderGroup\", {\n        method: 'post',\n        data: orderDTO,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      });\n      return response;\n    } catch(error) {\n      throw error;\n    }\n  }\n\n  public static placeRentOrders = async (user: User, orders: RentOrder[]) => {\n    try{\n      const orderDTO = orders.map((order)=> (\n        {\n          ...order, \n          startDate:order.startDate?.getTime(), \n          endDate:order.endDate?.getTime(), \n          userId: user.id\n        }\n      ));\n      const response = await axios(endPoint + \"/rentOrders\", {\n        method: 'post',\n        data: orderDTO,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n      });\n      return response;\n    } catch(error) {\n      throw error;\n    }\n  }\n}\n\nexport default ApiRequester;"]},"metadata":{},"sourceType":"module"}