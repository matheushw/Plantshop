{"ast":null,"code":"import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { loadAllProductsError, loadAllProductsSuccess, loadUsersError, loadUsersSuccess, signUpUserError, signUpUserSuccess } from './actionCreators';\nimport { ActionTypes } from './actionTypes';\nimport ApiRequester from './apiRequester';\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* fetchUser(action) {\n  try {\n    const user = yield call(ApiRequester.authenticateUser, action.email, action.password);\n    yield put(user.name === undefined ? loadUsersError() : loadUsersSuccess(user));\n  } catch (e) {\n    yield put(loadUsersError());\n  }\n}\n\nfunction* signUpUserSagas(action) {\n  try {\n    const user = yield call(ApiRequester.registerUser, action.name, action.address, action.phoneNumber, action.email, action.password);\n    console.log(user);\n    yield put(signUpUserSuccess());\n  } catch (e) {\n    yield put(signUpUserError());\n  }\n}\n\nfunction* loadAllProductsSagas() {\n  try {\n    const products = yield call(ApiRequester.getAllProducts);\n    yield put(products.length === 0 ? loadAllProductsError() : loadAllProductsSuccess(products));\n  } catch (e) {\n    yield put(loadAllProductsError());\n  }\n}\n\nfunction* placePurchaseOrderSagas(user, orders) {\n  try {\n    const products = yield call(ApiRequester.placePurchaseOrder);\n    yield put(products.length === 0 ? loadAllProductsError() : loadAllProductsSuccess(products));\n  } catch (e) {\n    yield put(loadAllProductsError());\n  }\n}\n\nfunction* mySaga() {\n  yield all([takeLatest(ActionTypes.LOAD_USER_REQUEST, fetchUser), takeLatest(ActionTypes.LOAD_ALL_PRODUCTS_REQUEST, loadAllProductsSagas), takeLatest(ActionTypes.SING_UP_USER_REQUEST, signUpUserSagas)]);\n}\n\nexport default mySaga;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/src/store/sagas.ts"],"names":["all","call","put","takeLatest","loadAllProductsError","loadAllProductsSuccess","loadUsersError","loadUsersSuccess","signUpUserError","signUpUserSuccess","ActionTypes","ApiRequester","fetchUser","action","user","authenticateUser","email","password","name","undefined","e","signUpUserSagas","registerUser","address","phoneNumber","console","log","loadAllProductsSagas","products","getAllProducts","length","placePurchaseOrderSagas","orders","placePurchaseOrder","mySaga","LOAD_USER_REQUEST","LOAD_ALL_PRODUCTS_REQUEST","SING_UP_USER_REQUEST"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,SAASC,oBAAT,EAA+BC,sBAA/B,EAAuDC,cAAvD,EAAuEC,gBAAvE,EAAyFC,eAAzF,EAA0GC,iBAA1G,QAAmI,kBAAnI;AAEA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAGA;AAEA,UAAUC,SAAV,CAAoBC,MAApB,EAAoD;AAClD,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMb,IAAI,CAACU,YAAY,CAACI,gBAAd,EAAgCF,MAAM,CAACG,KAAvC,EAA8CH,MAAM,CAACI,QAArD,CAAvB;AACA,UAAMf,GAAG,CAACY,IAAI,CAACI,IAAL,KAAcC,SAAd,GAA0Bb,cAAc,EAAxC,GAA6CC,gBAAgB,CAACO,IAAD,CAA9D,CAAT;AACD,GAHD,CAGE,OAAOM,CAAP,EAAU;AACV,UAAMlB,GAAG,CAACI,cAAc,EAAf,CAAT;AACD;AACF;;AAED,UAAUe,eAAV,CAA0BR,MAA1B,EAA2D;AACzD,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMb,IAAI,CAACU,YAAY,CAACW,YAAd,EAA4BT,MAAM,CAACK,IAAnC,EAAyCL,MAAM,CAACU,OAAhD,EAAyDV,MAAM,CAACW,WAAhE,EAA6EX,MAAM,CAACG,KAApF,EAA2FH,MAAM,CAACI,QAAlG,CAAvB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AACA,UAAMZ,GAAG,CAACO,iBAAiB,EAAlB,CAAT;AACD,GAJD,CAIE,OAAOW,CAAP,EAAU;AACV,UAAMlB,GAAG,CAACM,eAAe,EAAhB,CAAT;AACD;AACF;;AAED,UAAUmB,oBAAV,GAAuC;AACrC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAM3B,IAAI,CAACU,YAAY,CAACkB,cAAd,CAA3B;AACA,UAAM3B,GAAG,CAAC0B,QAAQ,CAACE,MAAT,KAAoB,CAApB,GAAwB1B,oBAAoB,EAA5C,GAAiDC,sBAAsB,CAACuB,QAAD,CAAxE,CAAT;AACD,GAHD,CAGE,OAAOR,CAAP,EAAU;AACV,UAAMlB,GAAG,CAACE,oBAAoB,EAArB,CAAT;AACD;AACF;;AAED,UAAU2B,uBAAV,CAAkCjB,IAAlC,EAA8CkB,MAA9C,EAA2E;AACzE,MAAI;AACF,UAAMJ,QAAQ,GAAG,MAAM3B,IAAI,CAACU,YAAY,CAACsB,kBAAd,CAA3B;AACA,UAAM/B,GAAG,CAAC0B,QAAQ,CAACE,MAAT,KAAoB,CAApB,GAAwB1B,oBAAoB,EAA5C,GAAiDC,sBAAsB,CAACuB,QAAD,CAAxE,CAAT;AACD,GAHD,CAGE,OAAOR,CAAP,EAAU;AACV,UAAMlB,GAAG,CAACE,oBAAoB,EAArB,CAAT;AACD;AACF;;AAED,UAAU8B,MAAV,GAAmB;AACjB,QAAMlC,GAAG,CAAC,CACRG,UAAU,CAACO,WAAW,CAACyB,iBAAb,EAAgCvB,SAAhC,CADF,EAERT,UAAU,CAACO,WAAW,CAAC0B,yBAAb,EAAwCT,oBAAxC,CAFF,EAGRxB,UAAU,CAACO,WAAW,CAAC2B,oBAAb,EAAmChB,eAAnC,CAHF,CAAD,CAAT;AAKD;;AAED,eAAea,MAAf","sourcesContent":["import { all, call, put, takeLatest } from 'redux-saga/effects'\nimport { loadAllProductsError, loadAllProductsSuccess, loadUsersError, loadUsersSuccess, signUpUserError, signUpUserSuccess } from './actionCreators';\nimport { LoadAllProductsRequest, LoadUsersRequest, SignUpUserRequest } from './actions';\nimport { ActionTypes } from './actionTypes';\nimport ApiRequester from './apiRequester'\nimport { ProductOrder, User } from './types';\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* fetchUser(action: LoadUsersRequest) : any {\n  try {\n    const user = yield call(ApiRequester.authenticateUser, action.email, action.password);\n    yield put(user.name === undefined ? loadUsersError() : loadUsersSuccess(user));\n  } catch (e) {\n    yield put(loadUsersError());\n  }\n}\n\nfunction* signUpUserSagas(action: SignUpUserRequest) : any {\n  try {\n    const user = yield call(ApiRequester.registerUser, action.name, action.address, action.phoneNumber, action.email, action.password);\n    console.log(user);\n    yield put(signUpUserSuccess());\n  } catch (e) {\n    yield put(signUpUserError());\n  }\n}\n\nfunction* loadAllProductsSagas() : any {\n  try {\n    const products = yield call(ApiRequester.getAllProducts);\n    yield put(products.length === 0 ? loadAllProductsError() : loadAllProductsSuccess(products));\n  } catch (e) {\n    yield put(loadAllProductsError());\n  }\n}\n\nfunction* placePurchaseOrderSagas(user: User, orders:ProductOrder[]) : any {\n  try {\n    const products = yield call(ApiRequester.placePurchaseOrder, );\n    yield put(products.length === 0 ? loadAllProductsError() : loadAllProductsSuccess(products));\n  } catch (e) {\n    yield put(loadAllProductsError());\n  }\n}\n\nfunction* mySaga() {\n  yield all([\n    takeLatest(ActionTypes.LOAD_USER_REQUEST, fetchUser),\n    takeLatest(ActionTypes.LOAD_ALL_PRODUCTS_REQUEST, loadAllProductsSagas),\n    takeLatest(ActionTypes.SING_UP_USER_REQUEST, signUpUserSagas),\n  ]);\n}\n\nexport default mySaga;"]},"metadata":{},"sourceType":"module"}