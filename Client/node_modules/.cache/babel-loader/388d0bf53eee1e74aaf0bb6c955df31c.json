{"ast":null,"code":"import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { loadAllOrdersError, loadAllOrdersSuccess, loadAllProductsError, loadAllProductsSuccess, loadUsersError, loadUsersSuccess, placePurchaseOrderError, placePurchaseOrderSuccess, placeRentOrdersError, placeRentOrdersSuccess, signUpUserError, signUpUserSuccess, addAdminError, addAdminSuccess, addProductError, addProductSuccess, removeProductError, removeProductSuccess, addInventoryError, addInventorySuccess, removeInventoryError, removeInventorySuccess, editUserError, editUserSuccess } from './actionCreators';\nimport { ActionTypes } from './actionTypes';\nimport ApiRequester from './apiRequester';\n\n// Worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* fetchUser(action) {\n  try {\n    const user = yield call(ApiRequester.authenticateUser, action.email, action.password);\n    yield put(user.name === undefined ? loadUsersError() : loadUsersSuccess(user));\n  } catch (e) {\n    yield put(loadUsersError());\n  }\n}\n\nfunction* editUserSagas(action) {\n  try {\n    const response = yield call(ApiRequester.editUser, action.name, action.address, action.phoneNumber, action.email, action.id);\n    yield put(response.status === 404 ? editUserError() : editUserSuccess());\n  } catch (e) {\n    yield put(editUserError());\n  }\n}\n\nfunction* signUpUserSagas(action) {\n  try {\n    const response = yield call(ApiRequester.registerUser, action.name, action.address, action.phoneNumber, action.email, action.password);\n    yield put(response.status === 404 ? signUpUserError() : signUpUserSuccess());\n  } catch (e) {\n    yield put(signUpUserError());\n  }\n}\n\nfunction* addAdminSagas(action) {\n  try {\n    const response = yield call(ApiRequester.addAdmin, action.name, action.address, action.phoneNumber, action.email, action.password);\n    yield put(response.status === 404 ? addAdminError() : addAdminSuccess());\n  } catch (e) {\n    yield put(addAdminError());\n  }\n}\n\nfunction* addProductSagas(action) {\n  try {\n    const response = yield call(ApiRequester.addProduct, action.name, action.category, action.quantity, action.img, action.price, action.description);\n    yield put(response === 404 ? addProductError() : addProductSuccess());\n  } catch (e) {\n    yield put(addProductError());\n  }\n}\n\nfunction* removeProductSagas(action) {\n  try {\n    const response = yield call(ApiRequester.removeProduct, action.productId);\n    yield put(response === 404 ? removeProductError() : removeProductSuccess());\n  } catch (e) {\n    yield put(removeProductError());\n  }\n}\n\nfunction* addInventorySagas(action) {\n  try {\n    const product = yield call(ApiRequester.addInventory, action.productId);\n    yield put(product === 404 ? addInventoryError() : addInventorySuccess(product));\n  } catch (e) {\n    yield put(addInventoryError());\n  }\n}\n\nfunction* removeInventorySagas(action) {\n  try {\n    const response = yield call(ApiRequester.removeInventory, action.productId);\n    yield put(response === 404 ? removeInventoryError() : removeInventorySuccess());\n  } catch (e) {\n    yield put(removeInventoryError());\n  }\n}\n\nfunction* loadAllProductsSagas() {\n  try {\n    const products = yield call(ApiRequester.getAllProducts);\n    yield put(products.length === 0 ? loadAllProductsError() : loadAllProductsSuccess(products));\n  } catch (e) {\n    yield put(loadAllProductsError());\n  }\n}\n\nfunction* placePurchaseOrderSagas(action) {\n  try {\n    const response = yield call(ApiRequester.placePurchaseOrder, action.user, action.order);\n    yield put((response === null || response === void 0 ? void 0 : response.status) === 200 ? placePurchaseOrderSuccess() : placePurchaseOrderError());\n  } catch (e) {\n    yield put(placePurchaseOrderError());\n  }\n}\n\nfunction* placeRentOrdersSagas(action) {\n  try {\n    const response = yield call(ApiRequester.placeRentOrders, action.user, action.rentOrders);\n    yield put((response === null || response === void 0 ? void 0 : response.status) === 200 ? placeRentOrdersSuccess() : placeRentOrdersError());\n  } catch (e) {\n    yield put(placeRentOrdersError());\n  }\n}\n\nfunction* loadAllOrdersSagas(action) {\n  try {\n    const purchaseOrders = yield call(ApiRequester.getAllPurchaseOrders, action.user);\n    const rentOrders = yield call(ApiRequester.getAllRentOrders, action.user);\n    let rentOrdersDTO = [];\n\n    if ((rentOrders === null || rentOrders === void 0 ? void 0 : rentOrders.status) === 200) {\n      var _rentOrders$data;\n\n      rentOrdersDTO = (_rentOrders$data = rentOrders.data) === null || _rentOrders$data === void 0 ? void 0 : _rentOrders$data.map(rentOrder => ({ ...rentOrder,\n        startDate: new Date(rentOrder.startDate),\n        endDate: new Date(rentOrder.endDate)\n      }));\n    }\n\n    yield put((purchaseOrders === null || purchaseOrders === void 0 ? void 0 : purchaseOrders.status) === 200 && (rentOrders === null || rentOrders === void 0 ? void 0 : rentOrders.status) === 200 ? loadAllOrdersSuccess(purchaseOrders.data, rentOrdersDTO) : loadAllOrdersError());\n  } catch (e) {\n    yield put(loadAllOrdersError());\n  }\n}\n\nfunction* mySaga() {\n  yield all([takeLatest(ActionTypes.LOAD_USER_REQUEST, fetchUser), takeLatest(ActionTypes.EDIT_USER_REQUEST, editUserSagas), takeLatest(ActionTypes.LOAD_ALL_PRODUCTS_REQUEST, loadAllProductsSagas), takeLatest(ActionTypes.SIGN_UP_USER_REQUEST, signUpUserSagas), takeLatest(ActionTypes.PLACE_PURCHASE_ORDER_REQUEST, placePurchaseOrderSagas), takeLatest(ActionTypes.PLACE_RENT_ORDERS_REQUEST, placeRentOrdersSagas), takeLatest(ActionTypes.LOAD_ALL_ORDERS_REQUEST, loadAllOrdersSagas), takeLatest(ActionTypes.SIGN_UP_USER_REQUEST, signUpUserSagas), takeLatest(ActionTypes.ADD_ADMIN_REQUEST, addAdminSagas), takeLatest(ActionTypes.ADD_PRODUCT_REQUEST, addProductSagas), takeLatest(ActionTypes.REMOVE_PRODUCT_REQUEST, removeProductSagas), takeLatest(ActionTypes.ADD_INVENTORY_REQUEST, addInventorySagas), takeLatest(ActionTypes.REMOVE_INVENTORY_REQUEST, removeInventorySagas)]);\n}\n\nexport default mySaga;","map":{"version":3,"sources":["/Users/matheuscunha/USP/Plantshop/src/store/sagas.ts"],"names":["all","call","put","takeLatest","loadAllOrdersError","loadAllOrdersSuccess","loadAllProductsError","loadAllProductsSuccess","loadUsersError","loadUsersSuccess","placePurchaseOrderError","placePurchaseOrderSuccess","placeRentOrdersError","placeRentOrdersSuccess","signUpUserError","signUpUserSuccess","addAdminError","addAdminSuccess","addProductError","addProductSuccess","removeProductError","removeProductSuccess","addInventoryError","addInventorySuccess","removeInventoryError","removeInventorySuccess","editUserError","editUserSuccess","ActionTypes","ApiRequester","fetchUser","action","user","authenticateUser","email","password","name","undefined","e","editUserSagas","response","editUser","address","phoneNumber","id","status","signUpUserSagas","registerUser","addAdminSagas","addAdmin","addProductSagas","addProduct","category","quantity","img","price","description","removeProductSagas","removeProduct","productId","addInventorySagas","product","addInventory","removeInventorySagas","removeInventory","loadAllProductsSagas","products","getAllProducts","length","placePurchaseOrderSagas","placePurchaseOrder","order","placeRentOrdersSagas","placeRentOrders","rentOrders","loadAllOrdersSagas","purchaseOrders","getAllPurchaseOrders","getAllRentOrders","rentOrdersDTO","data","map","rentOrder","startDate","Date","endDate","mySaga","LOAD_USER_REQUEST","EDIT_USER_REQUEST","LOAD_ALL_PRODUCTS_REQUEST","SIGN_UP_USER_REQUEST","PLACE_PURCHASE_ORDER_REQUEST","PLACE_RENT_ORDERS_REQUEST","LOAD_ALL_ORDERS_REQUEST","ADD_ADMIN_REQUEST","ADD_PRODUCT_REQUEST","REMOVE_PRODUCT_REQUEST","ADD_INVENTORY_REQUEST","REMOVE_INVENTORY_REQUEST"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest } from 'redux-saga/effects'\nimport { \n  loadAllOrdersError, loadAllOrdersSuccess, \n  loadAllProductsError, loadAllProductsSuccess, \n  loadUsersError, loadUsersSuccess, \n  placePurchaseOrderError, placePurchaseOrderSuccess, \n  placeRentOrdersError, placeRentOrdersSuccess, \n  signUpUserError, signUpUserSuccess,\n  addAdminError, addAdminSuccess,\n  addProductError, addProductSuccess,\n  removeProductError, removeProductSuccess,\n  addInventoryError, addInventorySuccess,\n  removeInventoryError, removeInventorySuccess,\n  editUserError, editUserSuccess\n\n} from './actionCreators';\nimport { LoadAllOrdersRequest, LoadUsersRequest, PlacePurchaseOrderRequest, PlaceRentOrdersRequest, SignUpUserRequest, AddAdminRequest, AddProductRequest, RemoveProductRequest, AddInventoryRequest, RemoveInventoryRequest, EditUserRequest} from './actions';\nimport { ActionTypes } from './actionTypes';\nimport ApiRequester from './apiRequester'\nimport { RentOrder } from './types';\n\n// Worker Saga: will be fired on USER_FETCH_REQUESTED actions\n\nfunction* fetchUser(action: LoadUsersRequest) : any {\n  try {\n    const user = yield call(ApiRequester.authenticateUser, action.email, action.password);\n    yield put(user.name === undefined ? loadUsersError() : loadUsersSuccess(user));\n  } catch (e) {\n    yield put(loadUsersError());\n  }\n}\n\nfunction* editUserSagas(action: EditUserRequest) : any {\n  try {\n    const response = yield call(ApiRequester.editUser, action.name, action.address, action.phoneNumber, action.email, action.id);\n    yield put(response.status === 404 ? editUserError() : editUserSuccess());\n  } catch (e) {\n    yield put(editUserError());\n  }\n}\n\nfunction* signUpUserSagas(action: SignUpUserRequest) : any {\n  try {\n    const response = yield call(ApiRequester.registerUser, action.name, action.address, action.phoneNumber, action.email, action.password);\n    yield put(response.status === 404 ? signUpUserError() : signUpUserSuccess());\n  } catch (e) {\n    yield put(signUpUserError());\n  }\n}\n\nfunction* addAdminSagas(action: AddAdminRequest) : any {\n  try {\n    const response = yield call(ApiRequester.addAdmin, action.name, action.address, action.phoneNumber, action.email, action.password);\n    yield put(response.status === 404 ? addAdminError() : addAdminSuccess());\n  } catch (e) {\n    yield put(addAdminError());\n  }\n}\n\nfunction* addProductSagas(action: AddProductRequest) : any {\n  try {\n    const response = yield call(ApiRequester.addProduct, action.name, action.category, action.quantity, action.img, action.price, action.description);\n    yield put(response === 404 ? addProductError() : addProductSuccess());\n  } catch (e) {\n    yield put(addProductError());\n  }\n}\n\nfunction* removeProductSagas(action: RemoveProductRequest) : any {\n  try {\n    const response = yield call(ApiRequester.removeProduct, action.productId);\n    yield put(response === 404 ? removeProductError() : removeProductSuccess());\n  } catch (e) {\n    yield put(removeProductError());\n  }\n}\n\nfunction* addInventorySagas(action: AddInventoryRequest) : any {\n  try {\n    const product = yield call(ApiRequester.addInventory, action.productId);\n    yield put(product === 404 ? addInventoryError() : addInventorySuccess(product));\n  } catch (e) {\n    yield put(addInventoryError());\n  }\n}\n\nfunction* removeInventorySagas(action: RemoveInventoryRequest) : any {\n  try {\n    const response = yield call(ApiRequester.removeInventory, action.productId);\n    yield put(response === 404 ? removeInventoryError() : removeInventorySuccess());\n  } catch (e) {\n    yield put(removeInventoryError());\n  }\n}\n\n\nfunction* loadAllProductsSagas() : any {\n  try {\n    const products = yield call(ApiRequester.getAllProducts);\n    yield put(products.length === 0 ? loadAllProductsError() : loadAllProductsSuccess(products));\n  } catch (e) {\n    yield put(loadAllProductsError());\n  }\n}\n\nfunction* placePurchaseOrderSagas(action: PlacePurchaseOrderRequest) : any {\n  try {\n    const response = yield call(ApiRequester.placePurchaseOrder, action.user, action.order);\n    yield put(response?.status=== 200? placePurchaseOrderSuccess() : placePurchaseOrderError());\n  } catch (e) {\n    yield put(placePurchaseOrderError());\n  }\n}\n\nfunction* placeRentOrdersSagas(action: PlaceRentOrdersRequest) : any {\n  try {\n    const response = yield call(ApiRequester.placeRentOrders, action.user, action.rentOrders);\n    yield put(response?.status=== 200? placeRentOrdersSuccess() : placeRentOrdersError());\n  } catch (e) {\n    yield put(placeRentOrdersError());\n  }\n}\n\nfunction* loadAllOrdersSagas(action: LoadAllOrdersRequest) : any {\n  try {\n    const purchaseOrders = yield call(ApiRequester.getAllPurchaseOrders, action.user);\n    const rentOrders = yield call(ApiRequester.getAllRentOrders, action.user);\n\n    let rentOrdersDTO: RentOrder[] = [];\n\n    if(rentOrders?.status === 200){ \n      rentOrdersDTO = rentOrders.data?.map((rentOrder: any) => <RentOrder> {\n        ...rentOrder, startDate: new Date(rentOrder.startDate), endDate: new Date(rentOrder.endDate)\n      });\n    }\n\n    yield put(\n      purchaseOrders?.status === 200 && rentOrders?.status=== 200? \n        loadAllOrdersSuccess(purchaseOrders.data, rentOrdersDTO) : loadAllOrdersError()\n    );\n  } catch (e) {\n    yield put(loadAllOrdersError());\n  }\n}\n\nfunction* mySaga() {\n  yield all([\n    takeLatest(ActionTypes.LOAD_USER_REQUEST, fetchUser),\n    takeLatest(ActionTypes.EDIT_USER_REQUEST, editUserSagas),\n    takeLatest(ActionTypes.LOAD_ALL_PRODUCTS_REQUEST, loadAllProductsSagas),\n    takeLatest(ActionTypes.SIGN_UP_USER_REQUEST, signUpUserSagas),\n    takeLatest(ActionTypes.PLACE_PURCHASE_ORDER_REQUEST, placePurchaseOrderSagas),\n    takeLatest(ActionTypes.PLACE_RENT_ORDERS_REQUEST, placeRentOrdersSagas),\n    takeLatest(ActionTypes.LOAD_ALL_ORDERS_REQUEST, loadAllOrdersSagas),\n    takeLatest(ActionTypes.SIGN_UP_USER_REQUEST, signUpUserSagas),\n    takeLatest(ActionTypes.ADD_ADMIN_REQUEST, addAdminSagas),\n    takeLatest(ActionTypes.ADD_PRODUCT_REQUEST, addProductSagas),\n    takeLatest(ActionTypes.REMOVE_PRODUCT_REQUEST, removeProductSagas),\n    takeLatest(ActionTypes.ADD_INVENTORY_REQUEST, addInventorySagas),\n    takeLatest(ActionTypes.REMOVE_INVENTORY_REQUEST, removeInventorySagas)\n  ]);\n}\n\nexport default mySaga;"]},"metadata":{},"sourceType":"module"}